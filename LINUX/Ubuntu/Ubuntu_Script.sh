#!/bin/bash

resultfile="Ubuntu_results.txt"

U_01() {
	echo ""  >> $resultfile 2>&1
	echo "▶ U-01(상) | 1. 계정관리 > 1.1 root 계정 원격접속 제한 ◀"  >> $resultfile 2>&1
	echo " 양호 판단 기준 : 원격 터미널 서비스를 사용하지 않거나, 사용 시 root 직접 접속을 차단한 경우"  >> $resultfile 2>&1
	if [ -f /etc/services ]; then
		if [ `cat /etc/services | grep -vE '^#|^\s#' | awk 'tolower($1)=="telnet" {print $2}' | awk -F / 'tolower($2)=="tcp" {print $1}' | wc -l` -gt 0 ]; then
			u01_port=(`cat /etc/services | grep -vE '^#|^\s#' | awk 'tolower($1)=="telnet" {print $2}' | awk -F / 'tolower($2)=="tcp" {print $1}'`)
			for ((x=0; x<${#u01_port[@]}; x++))
			do
				if [ `netstat -nat 2>/dev/null | grep -w 'tcp' | grep ":${u01_port[$x]} " | wc -l` -gt 0 ] || [ `ps -ef | grep -i 'telnet' | grep -v 'grep' | wc -l` -gt 0 ]; then
					if [ -f /etc/pam.d/login ]; then
						if [ `cat /etc/pam.d/login | grep -vE '^#|^\s#' | grep -i 'pam_securetty.so' | wc -l` -gt 0 ]; then
							if [ -f /etc/securetty ]; then
								if [ `cat /etc/securetty | grep -vE '^#|^\s#' | grep '^ *pts' | wc -l` -gt 0 ]; then
									echo "※ U-01 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
									echo " telnet 서비스를 사용하고, /etc/securetty 파일에 pts 부분이 제거 또는 주석 처리되어 있지 않습니다." >> $resultfile 2>&1
									return 0
								fi
							else
								echo "※ U-01 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
								echo " telnet 서비스를 사용하고, /etc/securetty 파일이 없습니다." >> $resultfile 2>&1
								return 0
							fi
						else
							echo "※ U-01 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
							echo " telnet 서비스를 사용하고, /etc/pam.d/login 파일에 pam_securetty.so 모듈이 제거 또는 주석 처리되어 있습니다." >> $resultfile 2>&1
							return 0
						fi
					else
						echo "※ U-01 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
						echo " telnet 서비스를 사용하고, /etc/pam.d/login 파일이 없습니다." >> $resultfile 2>&1
						return 0
					fi
				fi
			done
		fi
	fi
	if [ `netstat -nat 2>/dev/null | grep -w 'tcp' | grep ':23 ' | wc -l` -gt 0 ] || [ `ps -ef | grep -i 'telnet' | grep -v 'grep' | wc -l` -gt 0 ]; then
		if [ -f /etc/pam.d/login ]; then
			if [ `cat /etc/pam.d/login | grep -vE '^#|^\s#' | grep -i 'pam_securetty.so' | wc -l` -gt 0 ]; then
				if [ -f /etc/securetty ]; then
					if [ `cat /etc/securetty | grep -vE '^#|^\s#' | grep '^ *pts' | wc -l` -gt 0 ]; then
						echo "※ U-01 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
						echo " telnet 서비스를 사용하고, /etc/securetty 파일에 pts 부분이 제거 또는 주석 처리되어 있지 않습니다." >> $resultfile 2>&1
						return 0
					fi
				else
					echo "※ U-01 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
					echo " telnet 서비스를 사용하고, /etc/securetty 파일이 없습니다." >> $resultfile 2>&1
					return 0
				fi
			else
				echo "※ U-01 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
				echo " telnet 서비스를 사용하고, /etc/pam.d/login 파일에 pam_securetty.so 모듈이 제거 또는 주석 처리되어 있습니다." >> $resultfile 2>&1
				return 0
			fi
		else
			echo "※ U-01 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
			echo " telnet 서비스를 사용하고, /etc/pam.d/login 파일이 없습니다." >> $resultfile 2>&1
			return 0
		fi
	fi
	if [ `find / -name 'sshd_config' -type f 2> /dev/null | wc -l` -gt 0 ]; then
		u01_ssh_file=(`find / -name 'sshd_config' -type f 2> /dev/null`)
	fi
	if [ -f /etc/services ]; then
		if [ `cat /etc/services | grep -vE '^#|^\s#' | awk 'tolower($1)=="ssh" {print $2}' | awk -F / 'tolower($2)=="tcp" {print $1}' | wc -l` -gt 0 ]; then
			u01_port=(`cat /etc/services | grep -vE '^#|^\s#' | awk 'tolower($1)=="ssh" {print $2}' | awk -F / 'tolower($2)=="tcp" {print $1}'`)
			for ((j=0; j<${#u01_port[@]}; j++))
			do
				if [ `netstat -nat 2>/dev/null | grep -w 'tcp' | grep ":${u01_port[$j]} " | wc -l` -gt 0 ] || [ `ps -ef | grep -i 'sshd' | grep -v 'grep' | wc -l` -gt 0 ]; then
					if [ ${#u01_ssh_file[@]} -eq 0 ]; then
						echo "※ U-01 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
						echo " ssh 서비스를 사용하고, sshd_config 파일이 없습니다." >> $resultfile 2>&1
						return 0
					fi
					for ((i=0; i<${#u01_ssh_file[@]}; i++))
					do
						if [ `cat ${u01_ssh_file[$i]} | grep -vE '^#|^\s#' | grep -i 'permitrootlogin' | grep -i 'yes' | wc -l` -gt 0 ] || [ `cat ${u01_ssh_file[$i]} | grep -E '^#|^\s#' | grep -i 'permitrootlogin' | wc -l` -gt 0 ]; then
							echo "※ U-01 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
							echo " ssh 서비스를 사용하고, sshd_config 파일에서 root 계정의 원격 접속이 허용되어 있습니다." >> $resultfile 2>&1
							return 0
						fi
					done
				fi
			done
		fi
	fi
	if [ ${#u01_ssh_file[@]} -gt 0 ]; then
		for ((a=0; a<${#u01_ssh_file[@]}; a++))
		do
			if [ `cat ${u01_ssh_file[$a]} | grep -vE '^#|^\s#' | grep -i 'port'  | awk '{print $2}' | wc -l` -gt 0 ]; then
				u01_port=(`cat ${u01_ssh_file[$a]} | grep -vE '^#|^\s#' | grep -i 'port'  | awk '{print $2}'`)
				for ((b=0; b<${#u01_port[@]}; b++))
				do
					if [ `netstat -nat 2>/dev/null | grep -w 'tcp' | grep ":${u01_port[$b]} " | wc -l` -gt 0 ] || [ `ps -ef | grep -i 'sshd' | grep -v 'grep' | wc -l` -gt 0 ]; then
						for ((c=0; c<${#u01_ssh_file[@]}; c++))
						do
							if [ `cat ${u01_ssh_file[$c]} | grep -vE '^#|^\s#' | grep -i 'permitrootlogin' | grep -i 'yes' | wc -l` -gt 0 ] || [ `cat ${u01_ssh_file[$c]} | grep -E '^#|^\s#' | grep -i 'permitrootlogin' | wc -l` -gt 0 ]; then
								echo "※ U-01 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
								echo " ssh 서비스를 사용하고, sshd_config 파일에서 root 계정의 원격 접속이 허용되어 있습니다." >> $resultfile 2>&1
								return 0
							fi
						done
					fi
				done
			fi
		done
	fi
	if [ `netstat -nat 2>/dev/null | grep -w 'tcp' | grep ':22 ' | wc -l` -gt 0 ] || [ `ps -ef | grep -i 'sshd' | grep -v 'grep' | wc -l` -gt 0 ]; then
		if [ ${#u01_ssh_file[@]} -eq 0 ]; then
			echo "※ U-01 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
			echo " ssh 서비스를 사용하고, sshd_config 파일이 없습니다." >> $resultfile 2>&1
			return 0
		fi
		for ((l=0; l<${#u01_ssh_file[@]}; l++))
		do
			if [ `cat ${u01_ssh_file[$l]} | grep -vE '^#|^\s#' | grep -i 'permitrootlogin' | grep -i 'yes' | wc -l` -gt 0 ] || [ `cat ${u01_ssh_file[$l]} | grep -E '^#|^\s#' | grep -i 'permitrootlogin' | wc -l` -gt 0 ]; then
				echo "※ U-01 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
				echo " ssh 서비스를 사용하고, sshd_config 파일에서 root 계정의 원격 접속이 허용되어 있습니다." >> $resultfile 2>&1
				return 0
			fi
		done
	fi
	echo "※ U-01 결과 : 양호(Good)" >> $resultfile 2>&1
	return 0
}

U_02() {
	echo ""  >> $resultfile 2>&1
	echo "▶ U-02(상) | 1. 계정관리 > 1.2 패스워드 복잡성 설정 ◀"  >> $resultfile 2>&1
	echo " 양호 판단 기준 : 패스워드 최소길이 8자리 이상, 영문·숫자·특수문자 최소 입력 기능이 설정된 경우"  >> $resultfile 2>&1
	u02_count_file=0
	u02_count2_file=0
	u02_count2_B=0
	u02_count3_file=0
	u02_count3_B=0
	u02_credit=("lcredit" "ucredit" "dcredit" "ocredit")
	if [ -f /etc/login.defs ]; then
		((u02_count_file++))
		((u02_count2_file++))
		if [ `cat /etc/login.defs | grep -vE '^#|^\s#' | grep -i 'PASS_MIN_LEN' | awk '{print $2}' | wc -l` -gt 0 ]; then
			if [ `cat /etc/login.defs | grep -vE '^#|^\s#' | grep -i 'PASS_MIN_LEN' | awk '{print $2}'` -lt 8 ]; then
				echo "※ U-02 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
				echo " /etc/login.defs 파일에 최소 길이(PASS_MIN_LEN)가 8 미만으로 설정되어 있습니다." >> $resultfile 2>&1
				return 0
			fi
		else
			((u02_count2_B++))
		fi
	fi
	if [ -f /etc/security/pwquality.conf ]; then
		((u02_count_file++))
		((u02_count2_file++))
		if [ `cat /etc/security/pwquality.conf | grep -vE '^#|^\s#' | grep -i 'minlen' | wc -l` -gt 0 ]; then
			if [ `cat /etc/security/pwquality.conf | grep -vE '^#|^\s#' | grep -i 'minlen' | awk -F 'minlen' '{gsub(" ", "", $0); print substr($2,2,1)}'` -lt 8 ]; then
				echo "※ U-02 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
				echo " /etc/security/pwquality.conf 파일에 최소 길이(minlen)가 8 미만으로 설정되어 있습니다." >> $resultfile 2>&1
				return 0
			else
				if [ -f /etc/pam.d/common-password ]; then
					if [ `cat /etc/pam.d/common-password | grep -vE '^#|^\s#' | grep -i 'pam_pwquality.so' | wc -l` -eq 0 ]; then
						echo "※ U-02 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
						echo " /etc/security/pwquality.conf 파일에 최소 길이(minlen)를 8 이상으로 설정하고, /etc/pam.d/common-password 파일에 pam_pwquality.so 모듈을 추가하지 않았습니다." >> $resultfile 2>&1
						return 0
					fi
				else
					echo "※ U-02 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
					echo " /etc/security/pwquality.conf 파일에 최소 길이(minlen)를 8 이상으로 설정하고, /etc/pam.d/common-password 파일에 pam_pwquality.so 모듈을 추가하지 않았습니다." >> $resultfile 2>&1
					return 0
				fi
			fi
		else
			((u02_count2_B++))
		fi
		for ((l=0; l<${#u02_credit[@]}; l++))
		do
			((u02_count3_file++))
			if [ `cat /etc/security/pwquality.conf | grep -vE '^#|^\s#' | grep -i ${u02_credit[$l]} | wc -l` -gt 0 ]; then
				if [ `cat /etc/security/pwquality.conf | grep -vE '^#|^\s#' | grep -i ${u02_credit[$l]} | awk -F ${u02_credit[$l]} '{gsub(" ", "", $0); print substr($2,2,1)}'` == - ]; then
					if [ `cat /etc/security/pwquality.conf | grep -vE '^#|^\s#' | grep -i ${u02_credit[$l]} | awk -F ${u02_credit[$l]} '{gsub(" ", "", $0); print substr($2,3,1)}'` -ge 1 ]; then
						if [ -f /etc/pam.d/common-password ]; then
							if [ `cat /etc/pam.d/common-password | grep -vE '^#|^\s#' | grep -i 'pam_pwquality.so' | wc -l` -eq 0 ]; then
								echo "※ U-02 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
								echo " /etc/security/pwquality.conf 파일에 영문, 숫자, 특수문자의 최소 입력을 설정하고, /etc/pam.d/common-password 파일에 pam_pwquality.so 모듈을 추가하지 않았습니다." >> $resultfile 2>&1
								return 0
							fi
						else
							echo "※ U-02 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
							echo " /etc/security/pwquality.conf 파일에 영문, 숫자, 특수문자의 최소 입력을 설정하고, /etc/pam.d/common-password 파일에 pam_pwquality.so 모듈을 추가하지 않았습니다." >> $resultfile 2>&1
							return 0
						fi
					else
						echo "※ U-02 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
						echo " /etc/security/pwquality.conf 파일에 영문, 숫자, 특수문자의 최소 입력이 1 미만으로 설정되어 있습니다." >> $resultfile 2>&1
						return 0
					fi
				else
					echo "※ U-02 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
					echo " /etc/security/pwquality.conf 파일에 영문, 숫자, 특수문자의 최소 입력에 대한 설정이 없습니다." >> $resultfile 2>&1
					return 0
				fi
			else
				((u02_count3_B++))
			fi
		done
	fi
	if [ -f /etc/pam.d/common-password ]; then
		((u02_count_file++))
		u02_module=("pam_pwquality.so" "pam_cracklib.so" "pam_unix.so")
		for ((z=0; z<${#u02_module[@]}; z++))
		do
			((u02_count2_file++))
			if [ `cat /etc/pam.d/common-password | grep -vE '^#|^\s#' | grep -i 'minlen' | grep -i ${u02_module[$z]} | wc -l` -gt 0 ]; then
				u02_name=`cat /etc/pam.d/common-password | grep -vE '^#|^\s#' | grep -i 'minlen' | grep -i ${u02_module[$z]} | awk '{gsub(" ", "", $0); print}'`
				if [ `echo $u02_name | awk -F 'minlen' '{print substr($2,2,1)}'` -lt 8 ]; then
					echo "※ U-02 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
					echo " /etc/pam.d/common-password 파일에 최소 길이(minlen)가 8 미만으로 설정되어 있습니다." >> $resultfile 2>&1
					return 0
				fi
			else
				((u02_count2_B++))
			fi
		done
		for ((y=0; y<${#u02_module[@]}; y++))
		do
			
			for ((x=0; x<${#u02_credit[@]}; x++))
			do
				((u02_count3_file++))
				if [ `cat /etc/pam.d/common-password | grep -vE '^#|^\s#' | grep -i ${u02_credit[$x]} | grep -i ${u02_module[$y]} | wc -l` -gt 0 ]; then
					if [[ `cat /etc/pam.d/common-password | grep -vE '^#|^\s#' | grep -i ${u02_credit[$x]} | grep -i ${u02_module[$y]} | awk -F ${u02_credit[$x]} '{gsub(" ", "", $0); print substr($2,2,1)}'` == - ]]; then
						if [ `cat /etc/pam.d/common-password | grep -vE '^#|^\s#' | grep -i ${u02_credit[$x]} | grep -i ${u02_module[$y]} | awk -F ${u02_credit[$x]} '{gsub(" ", "", $0); print substr($2,3,1)}'` -lt 1 ]; then
							echo "※ U-02 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
							echo " /etc/pam.d/common-password 파일에 영문, 숫자, 특수문자의 최소 입력이 1 미만으로 설정되어 있습니다." >> $resultfile 2>&1
							return 0
						fi
					else
						echo "※ U-02 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
						echo " /etc/pam.d/common-password 파일에 영문, 숫자, 특수문자의 최소 입력이 설정되어 있지 않습니다." >> $resultfile 2>&1
						return 0
					fi
				else
					((u02_count3_B++))
				fi
			done
		done
	fi
	if [ $u02_count_file -eq 0 ]; then
		echo "※ U-02 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
		echo " 패스워드의 복잡성을 설정하는 파일이 없습니다." >> $resultfile 2>&1
		return 0
	elif [ $u02_count2_file -eq $u02_count2_B ]; then
		echo "※ U-02 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
		echo " 패스워드의 최소 길이를 설정한 파일이 없습니다." >> $resultfile 2>&1
		return 0
	elif [ $u02_count3_file -eq $u02_count3_B ]; then
		echo "※ U-02 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
		echo " 패스워드의 영문, 숫자, 특수문자의 최소 입력을 설정한 파일이 없습니다." >> $resultfile 2>&1
		return 0
	fi
	echo "※ U-02 결과 : 양호(Good)" >> $resultfile 2>&1
	return 0
}

U_03() {
	echo ""  >> $resultfile 2>&1
	echo "▶ U-03(상) | 1. 계정관리 > 1.3 계정 잠금 임계값 설정 ◀"  >> $resultfile 2>&1
	echo " 양호 판단 기준 : 계정 잠금 임계값이 10회 이하의 값으로 설정되어 있는 경우"  >> $resultfile 2>&1
	u03_count_file=0
	u03_count2_file=0
	u03_count2_B=0
	u03_modules=("pam_tally2.so" "pam_faillock.so")
	if [ -f /etc/pam.d/common-auth ]; then
		((u03_count_file++))
		for ((i=0; i<${#u03_modules[@]}; i++))
		do
			((u03_count2_file++))
			if [ `cat /etc/pam.d/common-auth | grep -vE '^#|^\s#' | grep -i ${u03_modules[$i]} | grep -i 'deny' | wc -l` -gt 0 ]; then
				if [ `cat /etc/pam.d/common-auth | grep -vE '^#|^\s#' | grep -i ${u03_modules[$i]} | grep -i 'deny' | awk -F 'deny' '{gsub(" ", "", $0); print substr($2,2,1)}'` -eq 0 ]; then
					continue
				elif [ `cat /etc/pam.d/common-auth | grep -vE '^#|^\s#' | grep -i ${u03_modules[$i]} | grep -i 'deny' | awk -F 'deny' '{gsub(" ", "", $0); print substr($2,2,1)}'` -eq 1 ]; then
					if [[ `cat /etc/pam.d/common-auth | grep -vE '^#|^\s#' | grep -i ${u03_modules[$i]} | grep -i 'deny' | awk -F 'deny' '{gsub(" ", "", $0); print substr($2,3,1)}'` == [1-9] ]]; then
						echo "※ U-03 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
						echo " /etc/pam.d/common-auth 파일에 계정 잠금 임계값이 11회 이상으로 설정되어 있습니다." >> $resultfile 2>&1
						return 0
					fi
				else
					if [[ `cat /etc/pam.d/common-auth | grep -vE '^#|^\s#' | grep -i ${u03_modules[$i]} | grep -i 'deny' | awk -F 'deny' '{gsub(" ", "", $0); print substr($2,3,1)}'` == [0-9] ]]; then
						echo "※ U-03 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
						echo " /etc/pam.d/common-auth 파일에 계정 잠금 임계값이 11회 이상으로 설정되어 있습니다." >> $resultfile 2>&1
						return 0
					fi
				fi
			else
				((u03_count2_B++))
			fi
		done
	fi
	if [ -f /etc/pam.d/common-password ]; then
		((u03_count_file++))
		for ((j=0; j<${#u03_modules[@]}; j++))
		do
			((u03_count2_file++))
			if [ `cat /etc/pam.d/common-password | grep -vE '^#|^\s#' | grep -i ${u03_modules[$j]} | grep -i 'deny' | wc -l` -gt 0 ]; then
				if [ `cat /etc/pam.d/common-password | grep -vE '^#|^\s#' | grep -i ${u03_modules[$i]} | grep -i 'deny' | awk -F 'deny' '{gsub(" ", "", $0); print substr($2,2,1)}'` -eq 0 ]; then
					continue
				elif [ `cat /etc/pam.d/common-password | grep -vE '^#|^\s#' | grep -i ${u03_modules[$j]} | grep -i 'deny' | awk -F 'deny' '{gsub(" ", "", $0); print substr($2,2,1)}'` -eq 1 ]; then
					if [[ `cat /etc/pam.d/common-password | grep -vE '^#|^\s#' | grep -i ${u03_modules[$j]} | grep -i 'deny' | awk -F 'deny' '{gsub(" ", "", $0); print substr($2,3,1)}'` == [1-9] ]]; then
						echo "※ U-03 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
						echo " /etc/pam.d/common-password 파일에 계정 잠금 임계값이 11회 이상으로 설정되어 있습니다." >> $resultfile 2>&1
						return 0
					fi
				else
					if [[ `cat /etc/pam.d/common-password | grep -vE '^#|^\s#' | grep -i ${u03_modules[$j]} | grep -i 'deny' | awk -F 'deny' '{gsub(" ", "", $0); print substr($2,3,1)}'` == [0-9] ]]; then
						echo "※ U-03 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
						echo " /etc/pam.d/common-password 파일에 계정 잠금 임계값이 11회 이상으로 설정되어 있습니다." >> $resultfile 2>&1
						return 0
					fi
				fi
			else
				((u03_count2_B++))
			fi
		done
	fi
	if [ $u03_count_file -eq 0 ]; then
		echo "※ U-03 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
		echo " 계정 잠금 임계값을 설정하는 파일이 없습니다." >> $resultfile 2>&1
		return 0
	elif [ $u03_count2_file -eq $u03_count2_B ]; then
		echo "※ U-03 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
		echo " 계정 잠금 임계값을 설정한 파일이 없습니다." >> $resultfile 2>&1
		return 0
	fi
	echo "※ U-03 결과 : 양호(Good)" >> $resultfile 2>&1
	return 0
}

U_04() {
	echo ""  >> $resultfile 2>&1
	echo "▶ U-04(상) | 1. 계정관리 > 1.4 패스워드 파일 보호 ◀"  >> $resultfile 2>&1
	echo " 양호 판단 기준 : 쉐도우 패스워드를 사용하거나, 패스워드를 암호화하여 저장하는 경우"  >> $resultfile 2>&1
	if [ `cat /etc/passwd | awk -F : '$2!="x"' | wc -l` -gt 0 ]; then
		echo "※ U-04 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
		echo " 쉐도우 패스워드를 사용하고 있지 않습니다." >> $resultfile 2>&1
		return 0
	else
		echo "※ U-04 결과 : 양호(Good)" >> $resultfile 2>&1
		return 0
	fi
}

U_05() {
	echo ""  >> $resultfile 2>&1
	echo "▶ U-05(상) | 2. 파일 및 디렉토리 관리 > 2.1 root홈, 패스 디렉터리 권한 및 패스 설정 ◀"  >> $resultfile 2>&1
	echo " 양호 판단 기준 : PATH 환경변수에 “.” 이 맨 앞이나 중간에 포함되지 않은 경우"  >> $resultfile 2>&1
	if [ `echo $PATH | grep -E '\.:|::' | wc -l` -gt 0 ]; then
		echo "※ U-05 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
		echo " PATH 환경 변수 내에 "." 또는 "::"이 포함되어 있습니다." >> $resultfile 2>&1
		return 0
	else
		u05_file=("/etc/profile" "/etc/.login" "/etc/csh.cshrc" "/etc/csh.login" "/etc/environment")
		for ((j=0; j<${#u05_file[@]}; j++))
		do
			if [ -f ${u05_file[$j]} ]; then
				if [ `cat ${u05_file[$j]} | grep -vE '^#|^\s#' | grep 'PATH=' | wc -l` -gt 0 ]; then
					if [ `cat ${u05_file[$j]} | grep -vE '^#|^\s#' | grep 'PATH=' | grep -E '\.:|::' | wc -l` -gt 0 ]; then
						echo "※ U-05 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
						echo " /etc 디렉터리 내 Start Profile에 설정된 PATH 환경 변수 내에 "." 또는 "::"이 포함되어 있습니다." >> $resultfile 2>&1
						return 0
					fi
				fi
			fi
		done
		u05_file=(".profile" ".cshrc" ".login" ".kshrc" ".bash_profile" ".bashrc" ".bash_login")
		for ((i=0; i<${#u05_file[@]}; i++))
		do
			if [ -f /root/${u05_file[$i]} ]; then
				if [ `cat /root/${u05_file[$i]} | grep -vE '^#|^\s#' | grep 'PATH=' | wc -l` -gt 0 ]; then
					if [ `cat /root/${u05_file[$i]} | grep -vE '^#|^\s#' | grep 'PATH=' | grep -E '\.:|::' | wc -l` -gt 0 ]; then
						echo "※ U-05 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
						echo " /root 디렉터리 내 Start Profile에 설정된 PATH 환경 변수 내에 "." 또는 "::"이 포함되어 있습니다." >> $resultfile 2>&1
						return 0
					fi
				fi
			fi
		done
		u05_home=(`cat /etc/passwd | awk -F : '$7!="/bin/false" && $7!="/sbin/nologin" && $6!=null {print $6}' | uniq`)
		u05_home2=(/home/*)
		for ((k=0; k<${#u05_home2[@]}; k++))
		do
			u05_home[${#u05_home[@]}]=${u05_home2[$k]}
		done
		for ((l=0; l<${#u05_home[@]}; l++))
		do
			for ((h=0; h<${#u05_file[@]}; h++))
			do
				if [ -f ${u05_home[$l]}/${u05_file[$h]} ]; then
					if [ `cat ${u05_home[$l]}/${u05_file[$h]} | grep -vE '^#|^\s#' | grep 'PATH=' | wc -l` -gt 0 ]; then
						if [ `cat ${u05_home[$l]}/${u05_file[$h]} | grep -vE '^#|^\s#' | grep 'PATH=' | grep -E '\.:|::' | wc -l` -gt 0 ]; then
							echo "※ U-05 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
							echo " 사용자 홈 디렉터리 내 Start Profile에 설정된 PATH 환경 변수 내에 "." 또는 "::"이 포함되어 있습니다." >> $resultfile 2>&1
							return 0
						fi
					fi
				fi
			done
		done
	fi
	echo "※ U-05 결과 : 양호(Good)" >> $resultfile 2>&1
	return 0
}

U_06() {
	echo ""  >> $resultfile 2>&1
	echo "▶ U-06(상) | 2. 파일 및 디렉토리 관리 > 2.2 파일 및 디렉터리 소유자 설정 ◀"  >> $resultfile 2>&1
	echo " 양호 판단 기준 : 소유자가 존재하지 않는 파일 및 디렉터리가 존재하지 않는 경우"  >> $resultfile 2>&1
	if [ `find / \( -nouser -or -nogroup \) 2>/dev/null | wc -l` -gt 0 ]; then
		echo "※ U-06 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
		echo " 소유자가 존재하지 않는 파일 및 디렉터리가 존재합니다." >> $resultfile 2>&1
		return 0
	else
		echo "※ U-06 결과 : 양호(Good)" >> $resultfile 2>&1
		return 0
	fi
}

U_07() {
	echo ""  >> $resultfile 2>&1
	echo "▶ U-07(상) | 2. 파일 및 디렉토리 관리 > 2.3 /etc/passwd 파일 소유자 및 권한 설정 ◀"  >> $resultfile 2>&1
	echo " 양호 판단 기준 : /etc/passwd 파일의 소유자가 root이고, 권한이 644 이하인 경우"  >> $resultfile 2>&1
	if [ -f /etc/passwd ]; then		
		if [ `ls -l /etc/passwd | awk '{print $3}'` == root ]; then
			if [ `stat /etc/passwd | grep -i 'Uid' | awk '{print $2}' | awk -F / '{print substr($1,3,3)}'` -le 644 ]; then
				u07_owner=`stat /etc/passwd | grep -i 'Uid' | awk '{print $2}' | awk -F / '{print substr($1,3,1)}'`
				u07_group=`stat /etc/passwd | grep -i 'Uid' | awk '{print $2}' | awk -F / '{print substr($1,4,1)}'`
				u07_other=`stat /etc/passwd | grep -i 'Uid' | awk '{print $2}' | awk -F / '{print substr($1,5,1)}'`
				if [ -z "$u07_owner" ] || [ $u07_owner -eq 0 ] || [ $u07_owner -eq 2 ] || [ $u07_owner -eq 4 ] || [ $u07_owner -eq 6 ]; then
					if [ -z "$u07_group" ] || [ $u07_group -eq 0 ] || [ $u07_group -eq 4 ]; then
						if [ -z "$u07_other" ] || [ $u07_other -eq 0 ] || [ $u07_other -eq 4 ]; then
							echo "※ U-07 결과 : 양호(Good)" >> $resultfile 2>&1
							return 0
						else
							echo "※ U-07 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
							echo " /etc/passwd 파일의 다른 사용자(other)에 대한 권한이 취약합니다." >> $resultfile 2>&1
							return 0
						fi
					else
						echo "※ U-07 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
						echo " /etc/passwd 파일의 그룹 사용자(group)에 대한 권한이 취약합니다." >> $resultfile 2>&1
						return 0
					fi
				else
					echo "※ U-07 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
					echo " /etc/passwd 파일의 사용자(owner)에 대한 권한이 취약합니다." >> $resultfile 2>&1
					return 0
				fi
			else
				echo "※ U-07 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
				echo " /etc/passwd 파일의 권한이 644보다 큽니다." >> $resultfile 2>&1
				return 0
			fi
		else
			echo "※ U-07 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
			echo " /etc/passwd 파일의 소유자(owner)가 root가 아닙니다." >> $resultfile 2>&1
			return 0
		fi
	else
		echo "※ U-07 결과 : N/A" >> $resultfile 2>&1
		echo " /etc/passwd 파일이 없습니다." >> $resultfile 2>&1
		return 0
	fi
}

U_08() {
	echo ""  >> $resultfile 2>&1
	echo "▶ U-08(상) | 2. 파일 및 디렉토리 관리 > 2.4 /etc/shadow 파일 소유자 및 권한 설정 ◀"  >> $resultfile 2>&1
	echo " 양호 판단 기준 : /etc/shadow 파일의 소유자가 root이고, 권한이 400 이하인 경우"  >> $resultfile 2>&1
	if [ -f /etc/shadow ]; then
		if [ `ls -l /etc/shadow | awk '{print $3}'` == root ]; then
			if [ `stat /etc/shadow | grep -i 'Uid' | awk '{print $2}' | awk -F / '{print substr($1,3,3)}'` -le 400 ]; then
				u08_owner=`stat /etc/shadow | grep -i 'Uid' | awk '{print $2}' | awk -F / '{print substr($1,3,1)}'`
				u08_group=`stat /etc/shadow | grep -i 'Uid' | awk '{print $2}' | awk -F / '{print substr($1,4,1)}'`
				u08_other=`stat /etc/shadow | grep -i 'Uid' | awk '{print $2}' | awk -F / '{print substr($1,5,1)}'`
				if [ -z "$u08_owner" ] || [ $u08_owner -eq 0 ] || [ $u08_owner -eq 4 ]; then
					if [ -z "$u08_group" ] || [ $u08_group -eq 0 ]; then
						if [ -z "$u08_other" ] || [ $u08_other -eq 0 ]; then
							echo "※ U-08 결과 : 양호(Good)" >> $resultfile 2>&1
							return 0
						else
							echo "※ U-08 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
							echo " /etc/shadow 파일의 다른 사용자(other)에 대한 권한이 취약합니다." >> $resultfile 2>&1
							return 0
						fi
					else
						echo "※ U-08 결과 : N/A" >> $resultfile 2>&1
						echo " /etc/shadow 파일의 그룹 사용자(group)에 대한 권한이 취약합니다." >> $resultfile 2>&1
						return 0
					fi
				else
					echo "※ U-08 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
					echo " /etc/shadow 파일의 사용자(owner)에 대한 권한이 취약합니다." >> $resultfile 2>&1
					return 0
				fi
			else
				echo "※ U-08 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
				echo " /etc/shadow 파일의 권한이 400보다 큽니다." >> $resultfile 2>&1
				return 0
			fi
		else
			echo "※ U-08 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
			echo " /etc/shadow 파일의 소유자(owner)가 root가 아닙니다." >> $resultfile 2>&1
			return 0
		fi
	else
		echo "※ U-08 결과 : N/A" >> $resultfile 2>&1
		echo " /etc/shadow 파일이 없습니다." >> $resultfile 2>&1
		return 0
	fi
}

U_09() {
	echo ""  >> $resultfile 2>&1
	echo "▶ U-09(상) | 2. 파일 및 디렉토리 관리 > 2.5 /etc/hosts 파일 소유자 및 권한 설정 ◀"  >> $resultfile 2>&1
	echo " 양호 판단 기준 : /etc/hosts 파일의 소유자가 root이고, 권한이 600인 이하인 경우"  >> $resultfile 2>&1
	if [ -f /etc/hosts ]; then
		if [ `ls -l /etc/hosts | awk '{print $3}'` == root ]; then
			if [ `stat /etc/hosts | grep -i 'Uid' | awk '{print $2}' | awk -F / '{print substr($1,3,3)}'` -le 600 ]; then
				u09_owner=`stat /etc/hosts | grep -i 'Uid' | awk '{print $2}' | awk -F / '{print substr($1,3,1)}'`
				u09_group=`stat /etc/hosts | grep -i 'Uid' | awk '{print $2}' | awk -F / '{print substr($1,4,1)}'`
				u09_other=`stat /etc/hosts | grep -i 'Uid' | awk '{print $2}' | awk -F / '{print substr($1,5,1)}'`
				if [ -z "$u09_owner" ] || $u09_owner -eq 0 ] || [ $u09_owner -eq 2 ] || [ $u09_owner -eq 4 ] || [ $u09_owner -eq 6 ]; then
					if [ -z "$u09_group" ] || [ $u09_group -eq 0 ]; then
						if [ -z "$u09_other" ] || [ $u09_other -eq 0 ]; then
							echo "※ U-09 결과 : 양호(Good)" >> $resultfile 2>&1
							return 0
						else
							echo "※ U-09 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
							echo " /etc/hosts 파일의 다른 사용자(other)에 대한 권한이 취약합니다." >> $resultfile 2>&1
							return 0
						fi
					else
						echo "※ U-09 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
						echo " /etc/hosts 파일의 그룹 사용자(group)에 대한 권한이 취약합니다." >> $resultfile 2>&1
						return 0
					fi
				else
					echo "※ U-09 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
					echo " /etc/hosts 파일의 사용자(owner)에 대한 권한이 취약합니다." >> $resultfile 2>&1
					return 0
				fi
			else
				echo "※ U-09 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
				echo " /etc/hosts 파일의 권한이 600보다 큽니다." >> $resultfile 2>&1
				return 0
			fi
		else
			echo "※ U-09 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
			echo " /etc/hosts 파일의 소유자(owner)가 root가 아닙니다." >> $resultfile 2>&1
			return 0
		fi
	else
		echo "※ U-09 결과 : N/A" >> $resultfile 2>&1
		echo " /etc/hosts 파일이 없습니다." >> $resultfile 2>&1
		return 0
	fi
}

U_10() {
	echo ""  >> $resultfile 2>&1
	echo "▶ U-10(상) | 2. 파일 및 디렉토리 관리 > 2.6 /etc/(x)inetd.conf 파일 소유자 및 권한 설정 ◀"  >> $resultfile 2>&1
	echo " 양호 판단 기준 : /etc/inetd.conf 파일의 소유자가 root이고, 권한이 600인 경우"  >> $resultfile 2>&1
	u10_count=0
	if [ -f /etc/xinetd.conf ]; then
		((u10_count++))
		if [ `ls -l /etc/xinetd.conf | awk '{print $3}'` == root ]; then
			if [ `stat /etc/xinetd.conf | grep -i 'Uid' | awk '{print $2}' | awk -F / '{print substr($1,3,3)}'` -ne 600 ]; then
				echo "※ U-10 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
				echo " /etc/xinetd.conf 파일의 권한이 600이 아닙니다." >> $resultfile 2>&1
				return 0
			fi
		else
			echo "※ U-10 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
			echo " /etc/xinetd.conf 파일의 소유자(owner)가 root가 아닙니다." >> $resultfile 2>&1
			return 0
		fi
	fi
	if [ -d /etc/xinetd.d ]; then
		if [ `find /etc/xinetd.d -type f 2>/dev/null | wc -l` -gt 0 ]; then
			u10_file=(`find /etc/xinetd.d -type f 2>/dev/null`)
			for ((i=0; i<${#u10_file[@]}; i++))
			do
				if [ `ls -l ${u10_file[$i]} | awk '{print $3}'` == root ]; then
					if [ `stat ${u10_file[$i]} | grep -i 'Uid' | awk '{print $2}' | awk -F / '{print substr($1,3,3)}'` -ne 600 ]; then
						echo "※ U-10 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
						echo " /etc/xinetd.d 디렉터리 내 파일의 권한이 600이 아닙니다." >> $resultfile 2>&1
						return 0
					fi
				else
					echo "※ U-10 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
					echo " /etc/xinetd.d 디렉터리 내 파일의 소유자(owner)가 root가 아닙니다." >> $resultfile 2>&1
					return 0
				fi
			done
		fi
	fi
	if [ -f /etc/inetd.conf ]; then
		((u10_count++))
		if [ `ls -l /etc/inetd.conf | awk '{print $3}'` == root ]; then
			if [ `stat /etc/inetd.conf | grep -i 'Uid' | awk '{print $2}' | awk -F / '{print substr($1,3,3)}'` -ne 600 ]; then
				echo "※ U-10 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
				echo " /etc/inetd.conf 파일의 권한이 600이 아닙니다." >> $resultfile 2>&1
				return 0
			fi
		else
			echo "※ U-10 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
			echo " /etc/inetd.conf 파일의 소유자(owner)가 root가 아닙니다." >> $resultfile 2>&1
			return 0
		fi
	fi
	if [ $u10_count -eq 0 ]; then
		echo "※ U-10 결과 : N/A" >> $resultfile 2>&1
		echo " /etc/(x)inetd.conf 파일이 없습니다." >> $resultfile 2>&1
	else
		echo "※ U-10 결과 : 양호(Good)" >> $resultfile 2>&1
	fi
}

U_11() {
	echo ""  >> $resultfile 2>&1
	echo "▶ U-11(상) | 2. 파일 및 디렉토리 관리 > 2.7 /etc/syslog.conf 파일 소유자 및 권한 설정 ◀"  >> $resultfile 2>&1
	echo " 양호 판단 기준 : /etc/syslog.conf 파일의 소유자가 root(또는 bin, sys)이고, 권한이 640 이하인 경우"  >> $resultfile 2>&1
	u11_file=("/etc/rsyslog.conf" "/etc/syslog.conf" "/etc/syslog-ng.conf")
	u11_count=0
	for ((i=0; i<${#u11_file[@]}; i++))
	do
		if [ -f ${u11_file[$i]} ]; then
			((u11_count++))
			u11_name=`ls -l ${u11_file[$i]} | awk '{print $3}'`
			if [ $u11_name == root ] || [ $u11_name == bin ] || [ $u11_name == sys ]; then
				if [ `stat ${u11_file[$i]} | grep -i 'Uid' | awk '{print $2}' | awk -F / '{print substr($1,3,3)}'` -le 640 ]; then
					u11_owner=`stat ${u11_file[$i]} | grep -i 'Uid' | awk '{print $2}' | awk -F / '{print substr($1,3,1)}'`
					u11_group=`stat ${u11_file[$i]} | grep -i 'Uid' | awk '{print $2}' | awk -F / '{print substr($1,4,1)}'`
					u11_other=`stat ${u11_file[$i]} | grep -i 'Uid' | awk '{print $2}' | awk -F / '{print substr($1,5,1)}'`
					if [ -z "$u11_owner" ] || [ $u11_owner -eq 6 ] || [ $u11_owner -eq 4 ] || [ $u11_owner -eq 2 ] || [ $u11_owner -eq 0 ]; then
						if [ -z "$u11_group" ] || [ $u11_group -eq 4 ] || [ $u11_group -eq 2 ] || [ $u11_group -eq 0 ]; then
							if [ -n "$u11_other" ] && [ $u11_other -ne 0 ]; then
								echo "※ U-11 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
								echo " ${u11_file[$i]} 파일의 다른 사용자(other)에 대한 권한이 취약합니다." >> $resultfile 2>&1
								return 0
							fi
						else
							echo "※ U-11 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
							echo " ${u11_file[$i]} 파일의 그룹 사용자(group)에 대한 권한이 취약합니다." >> $resultfile 2>&1
							return 0
						fi
					else
						echo "※ U-11 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
						echo " ${u11_file[$i]} 파일의 사용자(owner)에 대한 권한이 취약합니다." >> $resultfile 2>&1
						return 0
					fi
				else
					echo "※ U-11 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
					echo " ${u11_file[$i]} 파일의 권한이 640보다 큽니다." >> $resultfile 2>&1
					return 0
				fi
			else
				echo "※ U-11 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
				echo " ${u11_file[$i]} 파일의 소유자(owner)가 root(또는 bin, sys)가 아닙니다." >> $resultfile 2>&1
				return 0
			fi
		fi
	done
	if [ $u11_count -eq 0 ]; then
		echo "※ U-11 결과 : N/A" >> $resultfile 2>&1
		echo " /etc/syslog.conf 파일이 없습니다." >> $resultfile 2>&1
		return 0
	else
		echo "※ U-11 결과 : 양호(Good)" >> $resultfile 2>&1
		return 0
	fi
}

U_12() {
	echo ""  >> $resultfile 2>&1
	echo "▶ U-12(상) | 2. 파일 및 디렉토리 관리 > 2.8 /etc/services 파일 소유자 및 권한 설정 ◀"  >> $resultfile 2>&1
	echo " 양호 판단 기준 : /etc/services 파일의 소유자가 root(또는 bin, sys)이고, 권한이 644 이하인 경우"  >> $resultfile 2>&1
	if [ -f /etc/services ]; then
		u12_name=`ls -l /etc/services | awk '{print $3}'`
		if [ $u12_name == root ] || [ $u12_name == bin ] || [ $u12_name == sys ]; then
			if [ `stat /etc/services | grep -i 'Uid' | awk '{print $2}' | awk -F / '{print substr($1,3,3)}'` -le 644 ]; then
				u12_owner=`stat /etc/services | grep -i 'Uid' | awk '{print $2}' | awk -F / '{print substr($1,3,1)}'`
				u12_group=`stat /etc/services | grep -i 'Uid' | awk '{print $2}' | awk -F / '{print substr($1,4,1)}'`
				u12_other=`stat /etc/services | grep -i 'Uid' | awk '{print $2}' | awk -F / '{print substr($1,5,1)}'`
				if [ -z "$u12_owner" ] || [ $u12_owner -eq 6 ] || [ $u12_owner -eq 4 ] || [ $u12_owner -eq 2 ] || [ $u12_owner -eq 0 ]; then
					if [ -z "$u12_group" ] || [ $u12_group -eq 4 ] || [ $u12_group -eq 0 ]; then
						if [ -z "$u12_other" ] || [ $u12_other -eq 4 ] || [ $u12_other -eq 0 ]; then
							echo "※ U-12 결과 : 양호(Good)" >> $resultfile 2>&1
							return 0
						else
							echo "※ U-12 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
							echo " /etc/services 파일의 다른 사용자(other)에 대한 권한이 취약합니다." >> $resultfile 2>&1
							return 0
						fi
					else
						echo "※ U-12 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
						echo " /etc/services 파일의 그룹 사용자(group)에 대한 권한이 취약합니다." >> $resultfile 2>&1
						return 0
					fi
				else
					echo "※ U-12 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
					echo " /etc/services 파일의 사용자(owner)에 대한 권한이 취약합니다." >> $resultfile 2>&1
					return 0
				fi
			else
				echo "※ U-12 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
				echo " /etc/services 파일의 권한이 644보다 큽니다." >> $resultfile 2>&1
				return 0
			fi
		else
			echo "※ U-12 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
			echo " /etc/services 파일의 파일의 소유자(owner)가 root(또는 bin, sys)가 아닙니다." >> $resultfile 2>&1
			return 0
		fi
	else
		echo "※ U-12 결과 : N/A" >> $resultfile 2>&1
		echo " /etc/services 파일이 없습니다." >> $resultfile 2>&1
		return 0
	fi
}

U_13() {
	echo ""  >> $resultfile 2>&1
	echo "▶ U-13(상) | 2. 파일 및 디렉토리 관리 > 2.9 SUID, SGID, 설정 파일점검 ◀"  >> $resultfile 2>&1
	echo " 양호 판단 기준 : 주요 실행파일의 권한에 SUID와 SGID에 대한 설정이 부여되어 있지 않은 경우"  >> $resultfile 2>&1
	u13_file=("/sbin/dump" "/sbin/restore" "/sbin/unix_chkpwd" "/usr/bin/at" "/usr/bin/lpq" "/usr/bin/lpq-lpd" "/usr/bin/lpr" "/usr/bin/lpr-lpd" "/usr/bin/lprm" "/usr/bin/lprm-lpd" "/usr/bin/newgrp" "/usr/sbin/lpc" "/usr/sbin/lpc-lpd" "/usr/sbin/traceroute")
	for ((i=0; i<${#u13_file[@]}; i++))
	do
		if [ -f ${u13_file[$i]} ]; then
			if [ `ls -l ${u13_file[$i]} | awk '{print $1}' | grep -i 's' | wc -l` -gt 0 ]; then
				echo "※ U-13 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
				echo " 주요 실행 파일의 권한에 SUID나 SGID에 대한 설정이 부여되어 있습니다." >> $resultfile 2>&1
				return 0
			fi
		fi
	done
	echo "※ U-13 결과 : 양호(Good)" >> $resultfile 2>&1
	return 0
}

U_14() {
	echo ""  >> $resultfile 2>&1
	echo "▶ U-14(상) | 2. 파일 및 디렉토리 관리 > 2.10 사용자, 시스템 시작파일 및 환경파일 소유자 및 권한 설정 ◀"  >> $resultfile 2>&1
	echo " 양호 판단 기준 : 홈 디렉터리 환경변수 파일 소유자가 root 또는, 해당 계정으로 지정되어 있고, 홈 디렉터리 환경변수 파일에 root와 소유자만 쓰기 권한이 부여된 경우"  >> $resultfile 2>&1
	u14_home=(`cat /etc/passwd | awk -F : '$7!="/bin/false" && $7!="/sbin/nologin" && $6!=null {print $6}'`)
	u14_home2=(/home/*)
	for ((a=0; a<${#u14_home2[@]}; a++))
	do
		u14_home[${#u14_home[@]}]=${u14_home2[$a]}
	done
	u14_name=(`cat /etc/passwd | awk -F : '$7!="/bin/false" && $7!="/sbin/nologin" && $6!=null {print $1}'`)
	u14_name2=()
	for ((b=0; b<${#u14_home2[@]}; b++))
	do
		u14_name2[${#u14_name2[@]}]=`echo ${u14_home2[$b]} | awk -F / '{print $3}'`
	done
	for ((c=0; c<${#u14_name2[@]}; c++))
	do
		u14_name[${#u14_name[@]}]=${u14_name2[$c]}
	done
	u14_file=(".profile" ".cshrc" ".login" ".kshrc" ".bash_profile" ".bashrc" ".bash_login")
	for ((i=0; i<${#u14_home[@]}; i++))
	do
		for ((j=0; j<${#u14_file[@]}; j++))
		do
			if [ -f ${u14_home[$i]}/${u14_file[$j]} ]; then
				u14_name2=`ls -l ${u14_home[$i]}/${u14_file[$j]} | awk '{print $3}'`
				if [ $u14_name2 == root ] || [ $u14_name2 == ${u14_name[$i]} ]; then
					u14_other=`stat ${u14_home[$i]}/${u14_file[$j]} | grep -i 'Uid' | awk '{print $2}' | awk -F / '{print substr($1,5,1)}'`
					if [ -n "$u14_other" ]; then
						if [ $u14_other -eq 7 ] || [ $u14_other -eq 5 ] || [ $u14_other -eq 3 ] || [ $u14_other -eq 1 ]; then
							echo "※ U-14 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
							echo " ${u14_home[$i]} 홈 디렉터리 내 ${u14_file[$j]} 환경 변수 파일에 다른 사용자(other)의 쓰기(w) 권한이 부여 되어 있습니다." >> $resultfile 2>&1
							return 0
						fi
					fi
				else
					echo "※ U-14 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
					echo " ${u14_home[$i]} 홈 디렉터리 내 ${u14_file[$j]} 환경 변수 파일의 소유자(owner)가 root 또는 해당 계정이 아닙니다." >> $resultfile 2>&1
					return 0
				fi
			fi
		done
	done
	echo "※ U-14 결과 : 양호(Good)" >> $resultfile 2>&1
	return 0
}

U_15() {
	echo ""  >> $resultfile 2>&1
	echo "▶ U-15(상) | 2. 파일 및 디렉토리 관리 > 2.11 world writable 파일 점검 ◀"  >> $resultfile 2>&1
	echo " 양호 판단 기준 : 시스템 중요 파일에 world writable 파일이 존재하지 않거나, 존재 시 설정 이유를 확인하고 있는 경우"  >> $resultfile 2>&1
	if [ `find / -type f -perm -2 2>/dev/null | wc -l` -gt 0 ]; then
		echo "※ U-15 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
		echo " world writable 설정이 되어있는 파일이 있습니다." >> $resultfile 2>&1
		return 0
	else
		echo "※ U-15 결과 : 양호(Good)" >> $resultfile 2>&1
		return 0
	fi
}

U_16() {
	echo ""  >> $resultfile 2>&1
	echo "▶ U-16(상) | 2. 파일 및 디렉토리 관리 > 2.12 /dev에 존재하지 않는 device 파일 점검 ◀"  >> $resultfile 2>&1
	echo " 양호 판단 기준 : /dev에 대한 파일 점검 후 존재하지 않은 device 파일을 제거한 경우" >> $resultfile 2>&1
	if [ `find /dev -type f 2>/dev/null | wc -l` -gt 0 ]; then
		echo "※ U-16 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
		echo " /dev 디렉터리에 존재하지 않는 device 파일이 존재합니다." >> $resultfile 2>&1
		return 0
	else
		echo "※ U-16 결과 : 양호(Good)" >> $resultfile 2>&1
		return 0
	fi
}

U_17() {
	echo ""  >> $resultfile 2>&1
	echo "▶ U-17(상) | 2. 파일 및 디렉토리 관리 > 2.13 $HOME/.rhosts, hosts.equiv 사용 금지 ◀"  >> $resultfile 2>&1
	echo " 양호 판단 기준 : login, shell, exec 서비스를 사용하지 않거나, 사용 시 아래와 같은 설정이 적용된 경우" >> $resultfile 2>&1
	echo " 1. /etc/hosts.equiv 및 $Home/.rhosts 파일 소유자가 root 또는, 해당 계정인 경우" >> $resultfile 2>&1
	echo " 2. /etc/hosts.equiv 및 $HOME/.rhosts 파일 권한이 600 이하인 경우" >> $resultfile 2>&1
	echo " 3. /etc/hosts.equiv 및 $HOME/.rhosts 파일 설정에 ‘+’ 설정이 없는 경우" >> $resultfile 2>&1
	u17_home=(`cat /etc/passwd | awk -F : '$7!="/bin/false" && $7!="/sbin/nologin" && $6!=null {print $6}'`)
	u17_home2=(/home/*)
	for ((j=0; j<${#u17_home2[@]}; j++))
	do
		u17_home[${#u17_home[@]}]=${u17_home2[$j]}
	done
	u17_name=(`cat /etc/passwd | awk -F : '$7!="/bin/false" && $7!="/sbin/nologin" && $6!=null {print $1}'`)
	for ((c=0; c<${#u17_home2[@]}; c++))
	do
		u17_name[${#u17_name[@]}]=`echo ${u17_home2[$c]} | awk -F / '{print $3}'`
	done
	u17_service=("rsh" "rlogin" "rexec" "shell" "login" "exec")	
	if [ -d /etc/xinetd.d ]; then
		for ((i=0; i<${#u17_service[@]}; i++))
		do
			if [ -f /etc/xinetd.d/${u17_service[$i]} ]; then
				if [ `cat /etc/xinetd.d/${u17_service[$i]} | grep -vE '^#|^\s#' | grep -i 'disable' | grep -i 'yes' | wc -l` -eq 0 ]; then
					if [ -f /etc/hosts.equiv ]; then
						if [ `ls -l /etc/hosts.equiv | awk '{print $3}'` == root ]; then
							if [ `stat /etc/hosts.equiv | grep -i 'Uid' | awk '{print $2}' | awk -F / '{print substr($1,3,3)}'` -le 600 ]; then
								u17_owner=`stat /etc/hosts.equiv | grep -i 'Uid' | awk '{print $2}' | awk -F / '{print substr($1,3,1)}'`
								u17_group=`stat /etc/hosts.equiv | grep -i 'Uid' | awk '{print $2}' | awk -F / '{print substr($1,4,1)}'`
								u17_other=`stat /etc/hosts.equiv | grep -i 'Uid' | awk '{print $2}' | awk -F / '{print substr($1,5,1)}'`
								if [ -z "$u17_owner" ] || [ $u17_owner -eq 6 ] || [ $u17_owner -eq 4 ] || [ $u17_owner -eq 2 ] || [ $u17_owner -eq 0 ]; then
									if [ -z "$u17_group" ] || [ $u17_group -eq 0 ]; then
										if [ -z "$u17_other" ] || [ $u17_other -eq 0 ]; then
											if [ `cat /etc/hosts.equiv | grep -vE '^#|^\s#' | grep '+' | wc -l` -gt 0 ]; then
												echo "※ U-17 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
												echo " r 계열 서비스를 사용하고, /etc/hosts.equiv 파일에 '+' 설정이 있습니다." >> $resultfile 2>&1
												return 0
											fi
										else
											echo "※ U-17 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
											echo " r 계열 서비스를 사용하고, /etc/hosts.equiv 파일의 다른 사용자(other)에 대한 권한이 취약합니다." >> $resultfile 2>&1
											return 0
										fi
									else
										echo "※ U-17 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
										echo " r 계열 서비스를 사용하고, /etc/hosts.equiv 파일의 그룹 사용자(group)에 대한 권한이 취약합니다." >> $resultfile 2>&1
										return 0
									fi
								else
									echo "※ U-17 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
									echo " r 계열 서비스를 사용하고, /etc/hosts.equiv 파일의 사용자(owner)에 대한 권한이 취약합니다." >> $resultfile 2>&1
									return 0
								fi
							else
								echo "※ U-17 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
								echo " r 계열 서비스를 사용하고, /etc/hosts.equiv 파일의 권한이 600보다 큽니다." >> $resultfile 2>&1
								return 0
							fi
						else
							echo "※ U-17 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
							echo " r 계열 서비스를 사용하고, /etc/hosts.equiv 파일의 소유자(owner)가 root가 아닙니다." >> $resultfile 2>&1
							return 0
						fi
					fi
					for ((e=0; e<${#u17_home[@]}; e++))
					do
						if [ -f ${u17_home[$e]}/.rhosts ]; then
							u17_name2=`ls -l ${u17_home[$e]}/.rhosts | awk '{print $3}'`
							if [ $u17_name2 == root ] || [ $u17_name2 == ${u17_name[$e]} ]; then
								if [ `stat ${u17_home[$e]}/.rhosts | grep -i 'Uid' | awk '{print $2}' | awk -F / '{print substr($1,3,3)}'` -le 600 ]; then
									u17_owner=`stat ${u17_home[$e]}/.rhosts | grep -i 'Uid' | awk '{print $2}' | awk -F / '{print substr($1,3,1)}'`
									u17_group=`stat ${u17_home[$e]}/.rhosts | grep -i 'Uid' | awk '{print $2}' | awk -F / '{print substr($1,4,1)}'`
									u17_other=`stat ${u17_home[$e]}/.rhosts | grep -i 'Uid' | awk '{print $2}' | awk -F / '{print substr($1,5,1)}'`
									if [ -z "$u17_owner" ] || [ $u17_owner -eq 6 ] || [ $u17_owner -eq 4 ] || [ $u17_owner -eq 2 ] || [ $u17_owner -eq 0 ]; then
										if [ -z "$u17_group" ] || [ $u17_group -eq 0 ]; then
											if [ -z "$u17_other" ] || [ $u17_other -eq 0 ]; then
												if [ `cat ${u17_home[$e]}/.rhosts | grep -vE '^#|^\s#' | grep '+' | wc -l` -gt 0 ]; then
													echo "※ U-17 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
													echo " r 계열 서비스를 사용하고, 사용자 홈 디렉터리 내 .rhosts 파일에 '+' 설정이 있습니다." >> $resultfile 2>&1
													return 0
												fi
											else
												echo "※ U-17 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
												echo " r 계열 서비스를 사용하고, 사용자 홈 디렉터리 내 .rhosts 파일의 다른 사용자(other)에 대한 권한이 취약합니다." >> $resultfile 2>&1
												return 0
											fi
										else
											echo "※ U-17 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
											echo " r 계열 서비스를 사용하고, 사용자 홈 디렉터리 내 .rhosts 파일의 그룹 사용자(group)에 대한 권한이 취약합니다." >> $resultfile 2>&1
											return 0
										fi
									else
										echo "※ U-17 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
										echo " r 계열 서비스를 사용하고, 사용자 홈 디렉터리 내 .rhosts 파일의 사용자(owner)에 대한 권한이 취약합니다." >> $resultfile 2>&1
										return 0
									fi
								else
									echo "※ U-17 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
									echo " r 계열 서비스를 사용하고, 사용자 홈 디렉터리 내 .rhosts 파일의 권한이 600보다 큽니다." >> $resultfile 2>&1
									return 0
								fi
							else
								echo "※ U-17 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
								echo " r 계열 서비스를 사용하고, 사용자 홈 디렉터리 내 .rhosts 파일의 소유자(owner)가 root 또는 해당 계정이 아닙니다." >> $resultfile 2>&1
								return 0
							fi
						fi
					done
				fi
			fi
		done
	fi
	if [ -f /etc/inetd.conf ]; then
		for ((q=0; q<${#u17_service[@]}; q++))
		do
			if [ `cat /etc/inetd.conf | grep -vE '^#|^\s#' | grep  ${u17_service[$q]} | wc -l` -gt 0 ]; then
				if [ -f /etc/hosts.equiv ]; then
					if [ `ls -l /etc/hosts.equiv | awk '{print $3}'` == root ]; then
						if [ `stat /etc/hosts.equiv | grep -i 'Uid' | awk '{print $2}' | awk -F / '{print substr($1,3,3)}'` -le 600 ]; then
							u17_owner=`stat /etc/hosts.equiv | grep -i 'Uid' | awk '{print $2}' | awk -F / '{print substr($1,3,1)}'`
							u17_group=`stat /etc/hosts.equiv | grep -i 'Uid' | awk '{print $2}' | awk -F / '{print substr($1,4,1)}'`
							u17_other=`stat /etc/hosts.equiv | grep -i 'Uid' | awk '{print $2}' | awk -F / '{print substr($1,5,1)}'`
							if [ -z "$u17_owner" ] || [ $u17_owner -eq 6 ] || [ $u17_owner -eq 4 ] || [ $u17_owner -eq 2 ] || [ $u17_owner -eq 0 ]; then
								if [ -z "$u17_group" ] || [ $u17_group -eq 0 ]; then
									if [ -z "$u17_other" ] || [ $u17_other -eq 0 ]; then
										if [ `cat /etc/hosts.equiv | grep -vE '^#|^\s#' | grep '+' | wc -l` -gt 0 ]; then
											echo "※ U-17 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
											echo " r 계열 서비스를 사용하고, /etc/hosts.equiv 파일에 '+' 설정이 있습니다." >> $resultfile 2>&1
											return 0
										fi
									else
										echo "※ U-17 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
										echo " r 계열 서비스를 사용하고, /etc/hosts.equiv 파일의 다른 사용자(other)에 대한 권한이 취약합니다." >> $resultfile 2>&1
										return 0
									fi
								else
									echo "※ U-17 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
									echo " r 계열 서비스를 사용하고, /etc/hosts.equiv 파일의 그룹 사용자(group)에 대한 권한이 취약합니다." >> $resultfile 2>&1
									return 0
								fi
							else
								echo "※ U-17 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
								echo " r 계열 서비스를 사용하고, /etc/hosts.equiv 파일의 사용자(owner)에 대한 권한이 취약합니다." >> $resultfile 2>&1
								return 0
							fi
						else
							echo "※ U-17 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
							echo " r 계열 서비스를 사용하고, /etc/hosts.equiv 파일의 권한이 600보다 큽니다." >> $resultfile 2>&1
							return 0
						fi
					else
						echo "※ U-17 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
						echo " r 계열 서비스를 사용하고, /etc/hosts.equiv 파일의 소유자(owner)가 root가 아닙니다." >> $resultfile 2>&1
						return 0
					fi
				fi
				for ((e=0; e<${#u17_home[@]}; e++))
				do
					if [ -f ${u17_home[$e]}/.rhosts ]; then
						u17_name2=`ls -l ${u17_home[$e]}/.rhosts | awk '{print $3}'`
						if [ $u17_name2 == root ] || [ $u17_name2 == ${u17_name[$e]} ]; then
							if [ `stat ${u17_home[$e]}/.rhosts | grep -i 'Uid' | awk '{print $2}' | awk -F / '{print substr($1,3,3)}'` -le 600 ]; then
								u17_owner=`stat ${u17_home[$e]}/.rhosts | grep -i 'Uid' | awk '{print $2}' | awk -F / '{print substr($1,3,1)}'`
								u17_group=`stat ${u17_home[$e]}/.rhosts | grep -i 'Uid' | awk '{print $2}' | awk -F / '{print substr($1,4,1)}'`
								u17_other=`stat ${u17_home[$e]}/.rhosts | grep -i 'Uid' | awk '{print $2}' | awk -F / '{print substr($1,5,1)}'`
								if [ -z "$u17_owner" ] || [ $u17_owner -eq 6 ] || [ $u17_owner -eq 4 ] || [ $u17_owner -eq 2 ] || [ $u17_owner -eq 0 ]; then
									if [ -z "$u17_group" ] || [ $u17_group -eq 0 ]; then
										if [ -z "$u17_other" ] || [ $u17_other -eq 0 ]; then
											if [ `cat ${u17_home[$e]}/.rhosts | grep -vE '^#|^\s#' | grep '+' | wc -l` -gt 0 ]; then
												echo "※ U-17 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
												echo " r 계열 서비스를 사용하고, 사용자 홈 디렉터리 내 .rhosts 파일에 '+' 설정이 있습니다." >> $resultfile 2>&1
												return 0
											fi
										else
											echo "※ U-17 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
											echo " r 계열 서비스를 사용하고, 사용자 홈 디렉터리 내 .rhosts 파일의 다른 사용자(other)에 대한 권한이 취약합니다." >> $resultfile 2>&1
											return 0
										fi
									else
										echo "※ U-17 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
										echo " r 계열 서비스를 사용하고, 사용자 홈 디렉터리 내 .rhosts 파일의 그룹 사용자(group)에 대한 권한이 취약합니다." >> $resultfile 2>&1
										return 0
									fi
								else
									echo "※ U-17 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
									echo " r 계열 서비스를 사용하고, 사용자 홈 디렉터리 내 .rhosts 파일의 사용자(owner)에 대한 권한이 취약합니다." >> $resultfile 2>&1
									return 0
								fi
							else
								echo "※ U-17 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
								echo " r 계열 서비스를 사용하고, 사용자 홈 디렉터리 내 .rhosts 파일의 권한이 600보다 큽니다." >> $resultfile 2>&1
								return 0
							fi
						else
							echo "※ U-17 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
							echo " r 계열 서비스를 사용하고, 사용자 홈 디렉터리 내 .rhosts 파일의 소유자(owner)가 root 또는 해당 계정이 아닙니다." >> $resultfile 2>&1
							return 0
						fi
					fi
				done
			fi
		done
	fi
	echo "※ U-17 결과 : 양호(Good)" >> $resultfile 2>&1
	return 0
}

U_18() {
	echo ""  >> $resultfile 2>&1
	echo "▶ U-18(상) | 2. 파일 및 디렉토리 관리 > 2.14 접속 IP 및 포트 제한 ◀"  >> $resultfile 2>&1
	echo " 양호 판단 기준 : 접속을 허용할 특정 호스트에 대한 IP 주소 및 포트 제한을 설정한 경우" >> $resultfile 2>&1
	echo " ### /etc/hosts.deny 파일에 ALL:ALL 설정이 없거나 /etc/hosts.allow 파일에 ALL:ALL 설정이 있을 경우 취약으로 판단" >> $resultfile 2>&1
	echo " ### iptables 사용 시 수동 점검을 추가로 진행하세요." >> $resultfile 2>&1
	if [ -f /etc/hosts.deny ]; then
		if [ `cat /etc/hosts.deny | grep -vE '^#|^\s#' | awk '{gsub(" ", "", $0); print}' | grep -i 'all:all' | wc -l` -gt 0 ]; then
			if [ -f /etc/hosts.allow ]; then
				if [ `cat /etc/hosts.allow | grep -vE '^#|^\s#' | awk '{gsub(" ", "", $0); print}' | grep -i 'all:all' | wc -l` -gt 0 ]; then
					echo "※ U-18 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
					echo " /etc/hosts.allow 파일에 'ALL : ALL' 설정이 있습니다." >> $resultfile 2>&1
					return 0
				else
					echo "※ U-18 결과 : 양호(Good)" >> $resultfile 2>&1
					return 0
				fi
			else
				echo "※ U-18 결과 : 양호(Good)" >> $resultfile 2>&1
				return 0
			fi
		else
			echo "※ U-18 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
			echo " /etc/hosts.deny 파일에 'ALL : ALL' 설정이 없습니다." >> $resultfile 2>&1
			return 0
		fi
	else
		echo "※ U-18 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
		echo " /etc/hosts.deny 파일이 없습니다." >> $resultfile 2>&1
		return 0
	fi
}

U_19() {
	echo ""  >> $resultfile 2>&1
	echo "▶ U-19(상) | 3. 서비스 관리 > 3.1 Finger 서비스 비활성화 ◀"  >> $resultfile 2>&1
	echo " 양호 판단 기준 : Finger 서비스가 비활성화 되어 있는 경우" >> $resultfile 2>&1
	if [ -f /etc/services ]; then
		if [ `cat /etc/services | grep -vE '^#|^\s#' | awk 'tolower($1)=="finger" {print $2}' | awk -F / 'tolower($2)=="tcp" {print $1}' | wc -l` -gt 0 ]; then
			u19_port=(`cat /etc/services | grep -vE '^#|^\s#' | awk 'tolower($1)=="finger" {print $2}' | awk -F / 'tolower($2)=="tcp" {print $1}'`)
			for ((h=0; h<${#u19_port[@]}; h++))
			do
				if [ `netstat -nat 2>/dev/null | grep -w 'tcp' | grep ":${u19_port[$h]} " | wc -l` -gt 0 ] || [ `ps -ef | grep -i 'finger' | grep -v 'grep' | wc -l` -gt 0 ]; then
					echo "※ U-19 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
					echo " finger 서비스가 실행 중입니다." >> $resultfile 2>&1
					return 0
				fi
			done
		fi
	fi
	if [ `netstat -nat 2>/dev/null | grep -w 'tcp' | grep ':79 ' | wc -l` -gt 0 ] || [ `ps -ef | grep -i 'finger' | grep -v 'grep' | wc -l` -gt 0 ]; then
		echo "※ U-19 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
		echo " finger 서비스가 실행 중입니다." >> $resultfile 2>&1
		return 0
	else
		echo "※ U-19 결과 : 양호(Good)" >> $resultfile 2>&1
		return 0
	fi
}

U_20() {
	echo ""  >> $resultfile 2>&1
	echo "▶ U-20(상) | 3. 서비스 관리 > 3.2 Anonymous FTP 비활성화 ◀"  >> $resultfile 2>&1
	echo " 양호 판단 기준 : Anonymous FTP (익명 ftp) 접속을 차단한 경우" >> $resultfile 2>&1
	if [ -f /etc/passwd ]; then
		if [ `cat /etc/passwd | awk -F : '{print $1}' | grep -wE 'ftp|anonymous' | wc -l` -gt 0 ]; then
			u20_count=0
			if [ `find / -name 'proftpd.conf' -type f 2>/dev/null | wc -l` -gt 0 ]; then
				u20_proftp=(`find / -name 'proftpd.conf' -type f 2>/dev/null`)
				for ((i=0; i<${#u20_proftp[@]}; i++))
				do
					((u20_count++))
					if [ `cat ${u20_proftp[$i]} | grep -vE '^#|^\s#' | grep '<Anonymous' | wc -l` -gt 0 ] && [ `cat ${u20_proftp[$i]} | grep -vE '^#|^\s#' | grep '</Anonymous>' | wc -l` -gt 0 ]; then
						u20_num=$((`cat ${u20_proftp[$i]} | grep -vE '^#|^\s#' | grep -n '</Anonymous>' | awk -F : '{print $1}'`-`cat ${u20_proftp[$i]} | grep -vE '^#|^\s#' | grep -n '<Anonymous' | awk -F : '{print $1}'`))
						if [ `cat ${u20_proftp[$i]} | grep -vE '^#|^\s#' | grep -A $u20_num '<Anonymous' | grep -wE 'User|UserAlias' | wc -l`-gt 0 ]; then
							echo "※ U-20 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
							echo " ${u20_proftp[$i]} 파일에서 'User' 또는 'UserAlias' 옵션이 삭제 또는 주석 처리되어 있지 않습니다." >> $resultfile 2>&1
							return 0
						fi
					fi
				done
			fi
			if [ `find / -name 'vsftpd.conf' -type f 2>/dev/null | wc -l` -gt 0 ]; then
				u20_vsftp=(`find / -name 'vsftpd.conf' -type f 2>/dev/null`)
				u20_count2=0
				for ((i=0; i<${#u20_vsftp[@]}; i++))
				do
					((u20_count++))
					if [ `cat ${u20_vsftp[$i]} | grep -vE '^#|^\s#' | grep -i 'anonymous_enable' | wc -l` -gt 0 ]; then
						((u20_count2++))
						if [ `cat ${u20_vsftp[$i]} | grep -vE '^#|^\s#' | grep -i 'anonymous_enable' | awk '{gsub(" ", "", $0); print tolower($0)}' | awk -F 'anonymous_enable=' '{print $2}'` == yes ]; then
							echo "※ U-20 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
							echo " ${u20_vsftp[$i]} 파일에서 익명 ftp 접속을 허용하고 있습니다." >> $resultfile 2>&1
							return 0
						fi
					fi
				done
				if [ $u20_count2 -eq 0 ]; then
					echo "※ U-20 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
					echo " vsftpd.conf 파일에 익명 ftp 접속을 설정하는 옵션이 없습니다." >> $resultfile 2>&1
					return 0
				fi
			fi
			if [ $u20_count -eq 0 ]; then
				echo "※ U-20 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
				echo " 익명 ftp 접속을 설정하는 파일이 없습니다." >> $resultfile 2>&1
				return 0
			fi
		fi
	fi
	echo "※ U-20 결과 : 양호(Good)" >> $resultfile 2>&1
	return 0
}

U_21() {
	echo ""  >> $resultfile 2>&1
	echo "▶ U-21(상) | 3. 서비스 관리 > 3.3 r 계열 서비스 비활성화 ◀"  >> $resultfile 2>&1
	echo " 양호 판단 기준 : 불필요한 r 계열 서비스가 비활성화 되어 있는 경우" >> $resultfile 2>&1
	u21_service=("rsh" "rlogin" "rexec" "shell" "login" "exec")
	if [ -d /etc/xinetd.d ]; then
		for ((i=0; i<${#u21_service[@]}; i++))
		do
			if [ -f /etc/xinetd.d/${u21_service[$i]} ]; then
				if [ `cat /etc/xinetd.d/${u21_service[$i]} | grep -vE '^#|^\s#' | grep -i 'disable' | grep -i 'yes' | wc -l` -eq 0 ]; then
					echo "※ U-21 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
					echo " 불필요한 r 계열 서비스가 실행 중입니다." >> $resultfile 2>&1
					return 0
				fi
			fi
		done
	fi
	if [ -f /etc/inetd.conf ]; then
		for ((q=0; q<${#u21_service[@]}; q++))
		do
			if [ `cat /etc/inetd.conf | grep -vE '^#|^\s#' | grep  ${u21_service[$q]} | wc -l` -gt 0 ]; then
				echo "※ U-21 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
				echo " 불필요한 r 계열 서비스가 실행 중입니다." >> $resultfile 2>&1
				return 0
			fi
		done
	fi
	echo "※ U-21 결과 : 양호(Good)" >> $resultfile 2>&1
	return 0
}

U_22() {
	echo ""  >> $resultfile 2>&1
	echo "▶ U-22(상) | 3. 서비스 관리 > 3.4 crond 파일 소유자 및 권한 설정 ◀"  >> $resultfile 2>&1
	echo " 양호 판단 기준 : crontab 명령어 일반사용자 금지 및 cron 관련 파일 640 이하인 경우" >> $resultfile 2>&1
	u22_crontab=("/usr/bin/crontab" "/usr/sbin/crontab" "/bin/crontab")
	if [ `which crontab 2>/dev/null | wc -l` -gt 0 ]; then
		u22_crontab[${#u22_crontab[@]}]=`which crontab 2>/dev/null`
	fi
	for ((q=0; q<${#u22_crontab[@]}; q++))
	do
		if [ -f ${u22_crontab[$q]} ]; then
			if [ `stat ${u22_crontab[$q]} | grep -i 'Uid' | awk '{print $2}' | awk -F / '{print substr($1,3,3)}'` -le 750 ]; then
				u22_group=`stat ${u22_crontab[$q]} | grep -i 'Uid' | awk '{print $2}' | awk -F / '{print substr($1,4,1)}'`
				u22_other=`stat ${u22_crontab[$q]} | grep -i 'Uid' | awk '{print $2}' | awk -F / '{print substr($1,5,1)}'`
				if [ -z "$u22_group" ] || [ $u22_group -eq 5 ] || [ $u22_group -eq 4 ] || [ $u22_group -eq 1 ] || [ $u22_group -eq 0 ]; then
					if [ -n "$u22_other" ] && [ $u22_other -ne 0 ]; then
						echo "※ U-22 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
						echo " ${u22_crontab[$q]} 명령어의 다른 사용자(other)에 대한 권한이 취약합니다." >> $resultfile 2>&1
						return 0
					fi
				else
					echo "※ U-22 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
					echo " ${u22_crontab[$q]} 명령어의 그룹 사용자(group)에 대한 권한이 취약합니다." >> $resultfile 2>&1
					return 0
				fi
			else
				echo "※ U-22 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
				echo " ${u22_crontab[$q]} 명령어의 권한이 750보다 큽니다." >> $resultfile 2>&1
				return 0
			fi
		fi
	done
	u22_dir=("/etc/cron.hourly" "/etc/cron.daily" "/etc/cron.weekly" "/etc/cron.monthly" "/var/spool/cron" "/var/spool/cron/crontabs")
	u22_file=("/etc/crontab" "/etc/cron.allow" "/etc/cron.deny")
	for ((i=0; i<${#u22_dir[@]}; i++))
	do
		if [ `find ${u22_dir[$i]} -type f 2>/dev/null | wc -l` -gt 0 ]; then
			u22_file2=(`find ${u22_dir[$i]} -type f 2>/dev/null`)
			for ((q=0; q<${#u22_file2[@]}; q++))
			do
				u22_file[${#u22_file[@]}]=${u22_file2[$q]}
			done
		fi
	done
	for ((i=0; i<${#u22_file[@]}; i++))
	do
		if [ -f ${u22_file[$i]} ]; then
			if [ `ls -l ${u22_file[$i]} | awk '{print $3}'` == root ]; then
				if [ `stat ${u22_file[$i]}| grep -i 'Uid' | awk '{print $2}' | awk -F / '{print substr($1,3,3)}'` -le 640 ]; then
					u22_owner=`stat ${u22_file[$i]} | grep -i 'Uid' | awk '{print $2}' | awk -F / '{print substr($1,3,1)}'`
					u22_group=`stat ${u22_file[$i]} | grep -i 'Uid' | awk '{print $2}' | awk -F / '{print substr($1,4,1)}'`
					u22_other=`stat ${u22_file[$i]} | grep -i 'Uid' | awk '{print $2}' | awk -F / '{print substr($1,5,1)}'`
					if [ -z "$u22_owner" ] || [ $u22_owner -eq 6 ] || [ $u22_owner -eq 4 ] || [ $u22_owner -eq 2 ] || [ $u22_owner -eq 0 ]; then
						if [ -z "$u22_group" ] || [ $u22_group -eq 4 ] || [ $u22_group -eq 0 ]; then
							if [ -n "$u22_other" ] && [ $u22_other -ne 0 ]; then
								echo "※ U-22 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
								echo " ${u22_file[$i]} 파일의 다른 사용자(other)에 대한 권한이 취약합니다." >> $resultfile 2>&1
								return 0
							fi
						else
							echo "※ U-22 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
							echo " ${u22_file[$i]} 파일의 그룹 사용자(group)에 대한 권한이 취약합니다." >> $resultfile 2>&1
							return 0
						fi
					else
						echo "※ U-22 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
						echo " ${u22_file[$i]} 파일의 사용자(owner)에 대한 권한이 취약합니다." >> $resultfile 2>&1
						return 0
					fi
				else
					echo "※ U-22 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
					echo " ${u22_file[$i]} 파일의 권한이 640보다 큽니다." >> $resultfile 2>&1
					return 0
				fi
			else
				echo "※ U-22 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
				echo " ${u22_file[$i]} 파일의 소유자(owner)가 root가 아닙니다." >> $resultfile 2>&1
				return 0
			fi
		fi
	done
	echo "※ U-22 결과 : 양호(Good)" >> $resultfile 2>&1
	return 0
}

U_23() {
	echo ""  >> $resultfile 2>&1
	echo "▶ U-23(상) | 3. 서비스 관리 > 3.5 DoS 공격에 취약한 서비스 비활성화 ◀"  >> $resultfile 2>&1
	echo " 양호 판단 기준 : 사용하지 않는 DoS 공격에 취약한 서비스가 비활성화된 경우" >> $resultfile 2>&1
	u23_service=("echo" "discard" "daytime" "chargen")
	if [ -d /etc/xinetd.d ]; then
		for ((i=0; i<${#u23_service[@]}; i++))
		do
			if [ -f /etc/xinetd.d/${u23_service[$i]} ]; then
				if [ `cat /etc/xinetd.d/${u23_service[$i]} | grep -vE '^#|^\s#' | grep -i 'disable' | grep -i 'yes' | wc -l` -eq 0 ]; then
					echo "※ U-23 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
					echo " 사용하지 않는 DoS 공격에 취약한 서비스가 /etc/xinetd.d 디렉터리 내 서비스 파일에서 실행 중입니다." >> $resultfile 2>&1
					return 0
				fi
			fi
		done
	fi
	if [ -f /etc/inetd.conf ]; then
		for ((i=0; i<${#u23_service[@]}; i++))
		do
			if [ `cat /etc/inetd.conf | grep -vE '^#|^\s#' | grep  ${u23_service[$i]} | wc -l` -gt 0 ]; then
				echo "※ U-23 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
				echo " 사용하지 않는 DoS 공격에 취약한 서비스가 /etc/inetd.conf 파일에서 실행 중입니다." >> $resultfile 2>&1
				return 0
			fi
		done
	fi
	echo "※ U-23 결과 : 양호(Good)" >> $resultfile 2>&1
	return 0
}

U_24() {
	echo ""  >> $resultfile 2>&1
	echo "▶ U-24(상) | 3. 서비스 관리 > 3.6 NFS 서비스 비활성화 ◀"  >> $resultfile 2>&1
	echo " 양호 판단 기준 : 불필요한 NFS 서비스 관련 데몬이 비활성화 되어 있는 경우" >> $resultfile 2>&1
	if [ `ps -ef | grep -iE 'nfs|rpc.statd|statd|rpc.lockd|lockd' | grep -ivE 'grep|kblockd|rstatd|' | wc -l` -gt 0 ]; then
		echo "※ U-24 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
		echo " 불필요한 NFS 서비스 관련 데몬이 실행 중입니다." >> $resultfile 2>&1
		return 0
	else
		echo "※ U-24 결과 : 양호(Good)" >> $resultfile 2>&1
		return 0
	fi
}

U_25() {
	echo ""  >> $resultfile 2>&1
	echo "▶ U-25(상) | 3. 서비스 관리 > 3.7 NFS 접근 통제 ◀"  >> $resultfile 2>&1
	echo " 양호 판단 기준 : 불필요한 NFS 서비스를 사용하지 않거나, 불가피하게 사용 시 everyone 공유를 제한한 경우" >> $resultfile 2>&1
	if [ `ps -ef | grep -iE 'nfs|rpc.statd|statd|rpc.lockd|lockd' | grep -ivE 'grep|kblockd|rstatd|' | wc -l` -gt 0 ]; then
		if [ -f /etc/exports ]; then
			if [ `cat /etc/exports | grep -vE '^#|^\s#' | grep '/' | grep '*' | wc -l` -gt 0 ]; then
				echo "※ U-25 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
				echo " /etc/exports 파일에 '*' 설정이 있습니다." >> $resultfile 2>&1
				echo " ### '*' 설정 = 모든 클라이언트에 대해 전체 네트워크 공유 허용" >> $resultfile 2>&1
				return 0
			elif [ `cat /etc/exports | grep -vE '^#|^\s#' | grep '/' | grep -i 'insecure' | wc -l` -gt 0 ]; then
				echo "※ U-25 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
				echo " /etc/exports 파일에 'insecure' 옵션이 설정되어 있습니다." >> $resultfile 2>&1
				return 0
			else
				if [ `cat /etc/exports | grep -vE '^#|^\s#' | grep '/' | wc -l` -ne `cat /etc/exports | grep -vE '^#|^\s#' | grep '/' | grep -iE 'root_squash|all_squash' | wc -l` ]; then
					echo "※ U-25 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
					echo " /etc/exports 파일에 'root_squash' 또는 'all_squash' 옵션이 설정되어 있지 않습니다." >> $resultfile 2>&1
					return 0
				fi
			fi
		fi
	else
		echo "※ U-25 결과 : 양호(Good)" >> $resultfile 2>&1
		return 0
	fi
}

U_26() {
	echo ""  >> $resultfile 2>&1
	echo "▶ U-26(상) | 3. 서비스 관리 > 3.8 automountd 제거 ◀"  >> $resultfile 2>&1
	echo " 양호 판단 기준 : automountd 서비스가 비활성화 되어 있는 경우" >> $resultfile 2>&1
	if [ `ps -ef | grep -iE 'automount|autofs' | grep -v 'grep' | wc -l` -gt 0 ]; then
		echo "※ U-26 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
		echo " automountd 서비스가 실행 중입니다." >> $resultfile 2>&1
		return 0
	else
		echo "※ U-26 결과 : 양호(Good)" >> $resultfile 2>&1
		return 0
	fi
}

U_27() {
	echo ""  >> $resultfile 2>&1
	echo "▶ U-27(상) | 3. 서비스 관리 > 3.9 RPC 서비스 확인 ◀"  >> $resultfile 2>&1
	echo " 양호 판단 기준 : 불필요한 RPC 서비스가 비활성화 되어 있는 경우" >> $resultfile 2>&1
	u27_service=("rpc.cmsd" "rpc.ttdbserverd" "sadmind" "rusersd" "walld" "sprayd" "rstatd" "rpc.nisd" "rexd" "rpc.pcnfsd" "rpc.statd" "rpc.ypupdated" "rpc.rquotad" "kcms_server" "cachefsd")
	if [ -d /etc/xinetd.d ]; then
		for ((i=0; i<${#u27_service[@]}; i++))
		do
			if [ -f /etc/xinetd.d/${u27_service[$i]} ]; then
				if [ `cat /etc/xinetd.d/${u27_service[$i]} | grep -vE '^#|^\s#' | grep -i 'disable' | grep -i 'yes' | wc -l` -eq 0 ]; then
					echo "※ U-27 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
					echo " 불필요한 RPC 서비스가 /etc/xinetd.d 디렉터리 내 서비스 파일에서 실행 중입니다." >> $resultfile 2>&1
					return 0
				fi
			fi
		done
	fi
	if [ -f /etc/inetd.conf ]; then
		for ((q=0; q<${#u27_service[@]}; q++))
		do
			if [ `cat /etc/inetd.conf | grep -vE '^#|^\s#' | grep -w ${u27_service[$q]} | wc -l` -gt 0 ]; then
				echo "※ U-27 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
				echo " 불필요한 RPC 서비스가 /etc/inetd.conf 파일에서 실행 중입니다." >> $resultfile 2>&1
				return 0
			fi
		done
	fi
	echo "※ U-27 결과 : 양호(Good)" >> $resultfile 2>&1
	return 0
}

U_28() {
	echo ""  >> $resultfile 2>&1
	echo "▶ U-28(상) | 3. 서비스 관리 > 3.10 NIS, NIS+ 점검 ◀"  >> $resultfile 2>&1
	echo " 양호 판단 기준 : NIS 서비스가 비활성화 되어 있거나, 필요 시 NIS+를 사용하는 경우" >> $resultfile 2>&1
	if [ `ps -ef | grep -iE 'ypserv|ypbind|ypxfrd|rpc.yppasswdd|rpc.ypupdated' | grep -v 'grep' | wc -l` -gt 0 ]; then
		echo "※ U-28 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
		echo " NIS 서비스가 실행 중입니다." >> $resultfile 2>&1
		return 0
	else
		echo "※ U-28 결과 : 양호(Good)" >> $resultfile 2>&1
		return 0
	fi
}

U_29() {
	echo ""  >> $resultfile 2>&1
	echo "▶ U-29(상) | 3. 서비스 관리 > 3.11 tftp, talk 서비스 비활성화 ◀"  >> $resultfile 2>&1
	echo " 양호 판단 기준 : tftp, talk, ntalk 서비스가 비활성화 되어 있는 경우" >> $resultfile 2>&1
	u29_service=("tftp" "talk" "ntalk")
	if [ -d /etc/xinetd.d ]; then
		for ((i=0; i<${#u29_service[@]}; i++))
		do
			if [ -f /etc/xinetd.d/${u29_service[$i]} ]; then
				if [ `cat /etc/xinetd.d/${u29_service[$i]} | grep -vE '^#|^\s#' | grep -i 'disable' | grep -i 'yes' | wc -l` -eq 0 ]; then
					echo "※ U-29 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
					echo " ${u29_service[$i]} 서비스가 /etc/xinetd.d 디렉터리 내 서비스 파일에서 실행 중입니다." >> $resultfile 2>&1
					return 0
				fi
			fi
		done
	fi
	if [ -f /etc/inetd.conf ]; then
		for ((q=0; q<${#u29_service[@]}; q++))
		do
			if [ `cat /etc/inetd.conf | grep -vE '^#|^\s#' | grep ${u29_service[$q]} | wc -l` -gt 0 ]; then
				echo "※ U-29 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
				echo " ${u29_service[$q]} 서비스가 /etc/inetd.conf 파일에서 실행 중입니다." >> $resultfile 2>&1
				return 0
			fi
		done
	fi
	echo "※ U-29 결과 : 양호(Good)" >> $resultfile 2>&1
	return 0
}

U_30() {
	echo ""  >> $resultfile 2>&1
	echo "▶ U-30(상) | 3. 서비스 관리 > 3.12 Sendmail 버전 점검 ◀"  >> $resultfile 2>&1
	echo " 양호 판단 기준 : Sendmail 버전이 최신버전인 경우" >> $resultfile 2>&1
	if [ -f /etc/services ]; then
		if [ `cat /etc/services | grep -vE '^#|^\s#' | awk 'tolower($1)=="smtp" {print $2}' | awk -F / 'tolower($2)=="tcp" {print $1}' | wc -l` -gt 0 ]; then
			u30_port=(`cat /etc/services | grep -vE '^#|^\s#' | awk 'tolower($1)=="smtp" {print $2}' | awk -F / 'tolower($2)=="tcp" {print $1}'`)
			for ((x=0; x<${#u30_port[@]}; x++))
			do
				if [ `netstat -nat 2>/dev/null | grep -w 'tcp' | grep ":${u30_port[$x]} " | wc -l` -gt 0 ] || [ `ps -ef | grep -iE 'smtp|sendmail' | grep -v 'grep' | wc -l` -gt 0 ]; then
					if [[ `dpkg -s sendmail 2>/dev/null | grep -i 'version' | awk '{print $2}' | cut -d : -f 2` != 8.17.1* ]]; then
						echo "※ U-30 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
						echo " sendmail 버전이 최신 버전(8.17.1)이 아닙니다." >> $resultfile 2>&1
						return 0
					fi
				fi
			done
		fi
	fi
	if [ `netstat -nat 2>/dev/null | grep -w 'tcp' | grep ':25 ' | wc -l` -gt 0 ] || [ `ps -ef | grep -iE 'smtp|sendmail' | grep -v 'grep' | wc -l` -gt 0 ]; then
		if [[ `dpkg -s sendmail 2>/dev/null | grep -i 'version' | awk '{print $2}' | cut -d : -f 2` != 8.17.1* ]]; then
			echo "※ U-30 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
			echo " sendmail 버전이 최신 버전(8.17.1)이 아닙니다." >> $resultfile 2>&1
			return 0
		fi
	fi
	echo "※ U-30 결과 : 양호(Good)" >> $resultfile 2>&1
	return 0
}

U_31() {
	echo ""  >> $resultfile 2>&1
	echo "▶ U-31(상) | 3. 서비스 관리 > 3.13 스팸 메일 릴레이 제한 ◀"  >> $resultfile 2>&1
	echo " 양호 판단 기준 : SMTP 서비스를 사용하지 않거나 릴레이 제한이 설정되어 있는 경우" >> $resultfile 2>&1
	if [ -f /etc/services ]; then
		if [ `cat /etc/services | grep -vE '^#|^\s#' | awk 'tolower($1)=="smtp" {print $2}' | awk -F / 'tolower($2)=="tcp" {print $1}' | wc -l` -gt 0 ]; then
			u31_port=(`cat /etc/services | grep -vE '^#|^\s#' | awk 'tolower($1)=="smtp" {print $2}' | awk -F / 'tolower($2)=="tcp" {print $1}'`)
			for ((x=0; x<${#u31_port[@]}; x++))
			do
				if [ `netstat -nat 2>/dev/null | grep -w 'tcp' | grep ":${u31_port[$x]} " | wc -l` -gt 0 ] || [ `ps -ef | grep -iE 'smtp|sendmail' | grep -v 'grep' | wc -l` -gt 0 ]; then
					if [ `find / -name 'sendmail.cf' -type f 2>/dev/null | wc -l` -gt 0 ]; then
						u31_file=(`find / -name 'sendmail.cf' -type f 2>/dev/null`)
						if [ ${#u31_file[@]} -gt 0 ]; then
							for ((i=0; i<${#u31_file[@]}; i++))
							do
								if [ `cat ${u31_file[$i]} | grep -vE '^#|^\s#' | grep -i 'R$\*' | grep -i 'Relaying denied' | wc -l` -eq 0 ]; then
									echo "※ U-31 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
									echo " ${u31_file[$i]} 파일에 릴레이 제한이 설정되어 있지 않습니다." >> $resultfile 2>&1
									return 0
								fi
							done
						fi
					fi
				fi
			done
		fi
	fi
	if [ `netstat -nat 2>/dev/null | grep -w 'tcp' | grep ':25 ' | wc -l` -gt 0 ] || [ `ps -ef | grep -iE 'smtp|sendmail' | grep -v 'grep' | wc -l` -gt 0 ]; then
		if [ `find / -name 'sendmail.cf' -type f 2>/dev/null | wc -l` -gt 0 ]; then
			u31_file=(`find / -name 'sendmail.cf' -type f 2>/dev/null`)
			if [ ${#u31_file[@]} -gt 0 ]; then
				for ((i=0; i<${#u31_file[@]}; i++))
				do
					if [ `cat ${u31_file[$i]} | grep -vE '^#|^\s#' | grep -i 'R$\*' | grep -i 'Relaying denied' | wc -l` -eq 0 ]; then
						echo "※ U-31 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
						echo " ${u31_file[$i]} 파일에 릴레이 제한이 설정되어 있지 않습니다." >> $resultfile 2>&1
						return 0
					fi
				done
			fi
		fi
	fi
	echo "※ U-31 결과 : 양호(Good)" >> $resultfile 2>&1
	return 0
}

U_32() {
	echo ""  >> $resultfile 2>&1
	echo "▶ U-32(상) | 3. 서비스 관리 > 3.14 일반사용자의 Sendmail 실행 방지 ◀"  >> $resultfile 2>&1
	echo " 양호 판단 기준 : SMTP 서비스 미사용 또는, 일반 사용자의 Sendmail 실행 방지가 설정된 경우" >> $resultfile 2>&1
	if [ -f /etc/services ]; then
		if [ `cat /etc/services | grep -vE '^#|^\s#' | awk 'tolower($1)=="smtp" {print $2}' | awk -F / 'tolower($2)=="tcp" {print $1}' | wc -l` -gt 0 ]; then
			u32_port=(`cat /etc/services | grep -vE '^#|^\s#' | awk 'tolower($1)=="smtp" {print $2}' | awk -F / 'tolower($2)=="tcp" {print $1}'`)
			for ((x=0; x<${#u32_port[@]}; x++))
			do
				if [ `netstat -nat 2>/dev/null | grep -w 'tcp' | grep ":${u32_port[$x]} " | wc -l` -gt 0 ] || [ `ps -ef | grep -iE 'smtp|sendmail' | grep -v 'grep' | wc -l` -gt 0 ]; then
					if [ `find / -name 'sendmail.cf' -type f 2>/dev/null | wc -l` -gt 0 ]; then
						u32_file=(`find / -name 'sendmail.cf' -type f 2>/dev/null`)
						for ((i=0; i<${#u32_file[@]}; i++))
						do
							if [ `cat ${u32_file[$i]} | grep -vE '^#|^\s#' | awk '{gsub(" ", "", $0); print tolower($0)}' | awk -F 'privacyoptions=' '{print $2}' | grep 'restrictqrun' | wc -l` -eq 0 ]; then
								echo "※ U-32 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
								echo " ${u32_file[$i]} 파일에 restrictqrun 옵션이 설정되어 있지 않습니다." >> $resultfile 2>&1
								return 0
							fi
						done
					else
						echo "※ U-32 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
						echo " sendmail.cf 파일이 없습니다." >> $resultfile 2>&1
						return 0
					fi
				fi
			done
		fi
	fi
	if [ `netstat -nat 2>/dev/null | grep -w 'tcp' | grep ':25 ' | wc -l` -gt 0 ] || [ `ps -ef | grep -iE 'smtp|sendmail' | grep -v 'grep' | wc -l` -gt 0 ]; then
		if [ `find / -name 'sendmail.cf' -type f 2>/dev/null | wc -l` -gt 0 ]; then
			u32_file=(`find / -name 'sendmail.cf' -type f 2>/dev/null`)
			for ((i=0; i<${#u32_file[@]}; i++))
			do
				if [ `cat ${u32_file[$i]} | grep -vE '^#|^\s#' | awk '{gsub(" ", "", $0); print tolower($0)}' | awk -F 'privacyoptions=' '{print $2}' | grep 'restrictqrun' | wc -l` -eq 0 ]; then
					echo "※ U-32 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
					echo " ${u32_file[$i]} 파일에 restrictqrun 옵션이 설정되어 있지 않습니다." >> $resultfile 2>&1
					return 0
				fi
			done
		else
			echo "※ U-32 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
			echo " sendmail.cf 파일이 없습니다." >> $resultfile 2>&1
			return 0
		fi
	fi
	echo "※ U-32 결과 : 양호(Good)" >> $resultfile 2>&1
	return 0
}

U_33() {
	echo ""  >> $resultfile 2>&1
	echo "▶ U-33(상) | 3. 서비스 관리 > 3.15 DNS 보안 버전 패치 ◀"  >> $resultfile 2>&1
	echo " 양호 판단 기준 : DNS 서비스를 사용하지 않거나 주기적으로 패치를 관리하고 있는 경우" >> $resultfile 2>&1
	if [ `ps -ef | grep -i 'named' | grep -v 'grep' | wc -l` -gt 0 ]; then
		if [[ `dpkg -s bind9 2>/dev/null | grep -i 'version' | awk '{print $2}' | cut -d : -f 2` != 9.18.* ]]; then
			echo "※ U-33 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
			echo " BIND 버전이 최신 버전(9.18.7 이상)이 아닙니다." >> $resultfile 2>&1
			return 0
		else
			u33_ver=`dpkg -s bind9 2>/dev/null | grep -i 'version' | awk '{print $2}' | cut -d : -f 2 | awk -F . '{print $3}'`
			if [[ $u33_ver != [7-9]* ]] && [[ $u33_ver != 1[0-6]* ]]; then
				echo "※ U-33 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
				echo " BIND 버전이 최신 버전(9.18.7 이상)이 아닙니다." >> $resultfile 2>&1
				return 0
			fi
		fi
		
	fi
	echo "※ U-33 결과 : 양호(Good)" >> $resultfile 2>&1
	return 0
}

U_34() {
	echo ""  >> $resultfile 2>&1
	echo "▶ U-34(상) | 3. 서비스 관리 > 3.16 DNS Zone Transfer 설정 ◀"  >> $resultfile 2>&1
	echo " 양호 판단 기준 : DNS 서비스 미사용 또는, Zone Transfer를 허가된 사용자에게만 허용한 경우" >> $resultfile 2>&1
	if [ `ps -ef | grep -i 'named' | grep -v 'grep' | wc -l` -gt 0 ]; then
		if [ -f /etc/named.conf ]; then
			if [ `cat /etc/named.conf | grep -vE '^#|^\s#' | grep -i 'allow-transfer' | grep -i 'any' | wc -l` -gt 0 ]; then
				echo "※ U-34 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
				echo " /etc/named.conf 파일에 allow-transfer { any; } 설정이 있습니다." >> $resultfile 2>&1
				return 0
			fi
		fi
	fi
	echo "※ U-34 결과 : 양호(Good)" >> $resultfile 2>&1
	return 0
}

U_35() {
	echo ""  >> $resultfile 2>&1
	echo "▶ U-35(상) | 3. 서비스 관리 > 3.17 웹서비스 디렉토리 리스팅 제거 ◀"  >> $resultfile 2>&1
	echo " 양호 판단 기준 : 디렉터리 검색 기능을 사용하지 않는 경우" >> $resultfile 2>&1
	u35_find=(".htaccess" "httpd.conf" "apache2.conf" "userdir.conf")
	for ((i=0; i<${#u35_find[@]}; i++))
	do		
		if [ `find / -name ${u35_find[$i]} -type f 2>/dev/null | wc -l` -gt 0 ]; then
			u35_file=(`find / -name ${u35_find[$i]} -type f 2>/dev/null`)
			for ((j=0; j<${#u35_file[@]}; j++))
			do
				if [ ${u35_find[$i]} == userdir.conf ]; then
					if [ `cat  ${u35_file[$j]} | grep -vE '^#|^\s#' | grep -i 'userdir' | grep -i 'disabled' | wc -l` -eq 0 ]; then
						if [ `cat ${u35_file[$j]} | grep -vE '^#|^\s#' | grep -i 'Options' | grep -iv '\-indexes' | grep -i 'indexes' | wc -l` -gt 0 ]; then
							echo "※ U-35 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
							echo " Apache 설정 파일에 디렉터리 검색 기능을 사용하도록 설정되어 있습니다." >> $resultfile 2>&1
							return 0
						fi
					fi
				else
					if [ `cat ${u35_file[$j]} | grep -vE '^#|^\s#' | grep -i 'Options' | grep -iv '\-indexes' | grep -i 'indexes' | wc -l` -gt 0 ]; then
						echo "※ U-35 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
						echo " Apache 설정 파일에 디렉터리 검색 기능을 사용하도록 설정되어 있습니다." >> $resultfile 2>&1
						return 0
					fi
				fi
			done
		fi
	done
	echo "※ U-35 결과 : 양호(Good)" >> $resultfile 2>&1
	return 0
}

U_36() {
	echo ""  >> $resultfile 2>&1
	echo "▶ U-36(상) | 3. 서비스 관리 > 3.18 웹서비스 웹 프로세스 권한 제한 ◀"  >> $resultfile 2>&1
	echo " 양호 판단 기준 : Apache 데몬이 root 권한으로 구동되지 않는 경우" >> $resultfile 2>&1
	u36_find=(".htaccess" "httpd.conf" "apache2.conf")
	for ((i=0; i<${#u36_find[@]}; i++))
	do
		if [ `find / -name ${u36_find[$i]} -type f 2>/dev/null | wc -l` -gt 0 ]; then
			u36_file=(`find / -name ${u36_find[$i]} -type f 2>/dev/null`)
			for ((j=0; j<${#u36_file[@]}; j++))
			do
				if [ `cat ${u36_file[$j]} | grep -vE '^#|^\s#' | grep -B 2 -i 'group' | grep -i 'root' | wc -l` -gt 0 ]; then
					echo "※ U-36 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
					echo " Apache 데몬이 root 권한으로 구동되도록 설정되어 있습니다." >> $resultfile 2>&1
					return 0
				else
					if [ `cat ${u36_file[$j]} | grep -B 2 -i 'group' | grep '/' | wc -l` -gt 0 ] && [ $(cat ${u36_file[$j]} | grep -vE '^#|^\s#' | grep -i 'group' | grep '${' | awk -F '\\${' '{print $2}' | awk -F '}' '{print $1}' | grep -i 'group' | wc -l) -gt 0 ]; then
						u36_variable=$(cat ${u36_file[$j]} | grep -vE '^#|^\s#' | grep -i 'group' | grep '${' | awk -F '\\${' '{print $2}' | awk -F '}' '{print $1}' | grep -i 'group')
						u36_path=`cat ${u36_file[$j]} | grep -B 2 -i 'group' | grep '/' | awk 'BEGIN{OFS="\n"} {i=1; while(i<=NF) {print $i; i++}}' | grep '/'`
						if [ `cat $u36_path | grep -vE '^#|^\s#' | grep -B 1 $u36_variable | grep -i 'root' | wc -l` -gt 0 ]; then
							echo "※ U-36 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
							echo " Apache 데몬이 root 권한으로 구동되도록 설정되어 있습니다." >> $resultfile 2>&1
							return 0
						fi
					fi
				fi
			done
		fi
	done
	echo "※ U-36 결과 : 양호(Good)" >> $resultfile 2>&1
	return 0
}

U_37() {
	echo ""  >> $resultfile 2>&1
	echo "▶ U-37(상) | 3. 서비스 관리 > 3.19 웹서비스 상위 디렉토리 접근 금지 ◀"  >> $resultfile 2>&1
	echo " 양호 판단 기준 : 상위 디렉터리에 이동제한을 설정한 경우" >> $resultfile 2>&1
	u37_find=(".htaccess" "httpd.conf" "apache2.conf" "userdir.conf")
	u37_count=0
	for ((i=0; i<${#u37_find[@]}; i++))
	do
		if [ `find / -name ${u37_find[$i]} -type f 2>/dev/null | wc -l` -gt 0 ]; then
			((u37_count++))
			u37_file=(`find / -name ${u37_find[$i]} -type f 2>/dev/null`)
			for ((j=0; j<${#u37_file[@]}; j++))
			do
				if [ ${u37_find[$i]} == userdir.conf ]; then
					if [ `cat  ${u37_file[$j]} | grep -vE '^#|^\s#' | grep -i 'userdir' | grep -i 'disabled' | wc -l` -eq 0 ]; then
						if [ `cat ${u37_file[$j]} | grep -vE '^#|^\s#' | grep -i 'AllowOverride' | wc -l` -gt 0 ]; then
							if [ `cat ${u37_file[$j]} | grep -vE '^#|^\s#' | grep -i 'AllowOverride' | grep -i 'None' | wc -l` -gt 0 ]; then
								echo "※ U-37 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
								echo " 웹 서비스 상위 디렉터리에 이동 제한을 설정하지 않았습니다." >> $resultfile 2>&1
								return 0
							fi
						else
							echo "※ U-37 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
							echo " 웹 서비스 상위 디렉터리에 이동 제한을 설정하지 않았습니다." >> $resultfile 2>&1
							return 0
						fi
					fi
				else
					if [ `cat ${u37_file[$j]} | grep -vE '^#|^\s#' | grep -i 'AllowOverride' | wc -l` -gt 0 ]; then
						if [ `cat ${u37_file[$j]} | grep -vE '^#|^\s#' | grep -i 'AllowOverride' | grep -i 'None' | wc -l` -gt 0 ]; then
							echo "※ U-37 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
							echo " 웹 서비스 상위 디렉터리에 이동 제한을 설정하지 않았습니다." >> $resultfile 2>&1
							return 0
						fi
					else
						echo "※ U-37 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
						echo " 웹 서비스 상위 디렉터리에 이동 제한을 설정하지 않았습니다." >> $resultfile 2>&1
						return 0
					fi
				fi
			done
		fi
	done
	if [ `ps -ef | grep -iE 'httpd|apache2' | grep -v 'grep' | wc -l` -gt 0 ] && [ $u37_count -eq 0 ]; then
		echo "※ U-37 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
		echo " Apache 서비스를 사용하고, 웹 서비스 상위 디렉터리에 이동 제한을 설정하는 파일이 없습니다." >> $resultfile 2>&1
		return 0
	else
		echo "※ U-37 결과 : 양호(Good)" >> $resultfile 2>&1
		return 0
	fi
}

U_38() {
	echo ""  >> $resultfile 2>&1
	echo "▶ U-38(상) | 3. 서비스 관리 > 3.20 웹서비스 불필요한 파일 제거 ◀"  >> $resultfile 2>&1
	echo " 양호 판단 기준 : 기본으로 생성되는 불필요한 파일 및 디렉터리가 제거되어 있는 경우" >> $resultfile 2>&1
	u38_dir=()
	u38_find=(".htaccess" "httpd.conf" "apache2.conf")
	for ((i=0; i<${#u38_find[@]}; i++))
	do
		if [ `find / -name ${u38_find[$i]} -type f 2>/dev/null | wc -l` -gt 0 ]; then
			u38_file=(`find / -name ${u38_find[$i]} -type f 2>/dev/null`)
			for ((j=0; j<${#u38_file[@]}; j++))
			do
				if [ `cat ${u38_file[$j]} | grep -vE '^#|^\s#' | grep -i 'serverroot' | grep '/' | wc -l` -gt 0 ]; then
					u38_dir[${#u38_dir[@]}]=`cat ${u38_file[$j]} | grep -vE '^#|^\s#' | grep -i 'serverroot' | grep '/' | awk '{gsub(/"/, "", $0); print $2}'`
				fi
			done
		fi
	done
	if [ `apache2 -V 2>/dev/ull | grep -i 'root' | awk -F '"' '{gsub(" ", "", $0); print $2}' | wc -l` -gt 0 ];then
		u38_dir[${#u38_dir[@]}]=`apache2 -V 2>/dev/ull | grep -i 'root' | awk -F '"' '{gsub(" ", "", $0); print $2}'`
	fi
	if [ `httpd -V 2>/dev/ull | grep -i 'root' | awk -F '"' '{gsub(" ", "", $0); print $2}' | wc -l` -gt 0 ]; then
		u38_dir[${#u38_dir[@]}]=`httpd -V 2>/dev/ull | grep -i 'root' | awk -F '"' '{gsub(" ", "", $0); print $2}'`
	fi
	for ((i=0; i<${#u38_dir[@]}; i++))
	do
		if [ `find ${u38_dir[$i]} -name 'manual' -type f 2>/dev/null | wc -l` -gt 0 ]; then
			echo "※ U-38 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
			echo " Apache 홈 디렉터리 내 기본으로 생성되는 불필요한 파일 및 디렉터리가 제거되어 있지 않습니다." >> $resultfile 2>&1
			return 0
		fi
	done
	echo "※ U-38 결과 : 양호(Good)" >> $resultfile 2>&1
	return 0
}

U_39() {
	echo ""  >> $resultfile 2>&1
	echo "▶ U-39(상) | 3. 서비스 관리 > 3.21 웹서비스 링크 사용금지 ◀"  >> $resultfile 2>&1
	echo " 양호 판단 기준 : 심볼릭 링크, aliases 사용을 제한한 경우" >> $resultfile 2>&1
	u39_find=(".htaccess" "httpd.conf" "apache2.conf" "userdir.conf")
	for ((i=0; i<${#u39_find[@]}; i++))
	do		
		if [ `find / -name ${u39_find[$i]} -type f 2>/dev/null | wc -l` -gt 0 ]; then
			u39_file=(`find / -name ${u39_find[$i]} -type f 2>/dev/null`)
			for ((j=0; j<${#u39_file[@]}; j++))
			do
				if [ ${u39_find[$i]} == userdir.conf ]; then
					if [ `cat  ${u39_file[$j]} | grep -vE '^#|^\s#' | grep -i 'userdir' | grep -i 'disabled' | wc -l` -eq 0 ]; then
						if [ `cat ${u39_file[$j]} | grep -vE '^#|^\s#' | grep -i 'Options' | grep -iv '\-FollowSymLinks' | grep -i 'FollowSymLinks' | wc -l` -gt 0 ]; then
							echo "※ U-39 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
							echo " Apache 설정 파일에 심볼릭 링크 사용을 제한하도록 설정하지 않습니다." >> $resultfile 2>&1
							return 0
						fi
					fi
				else
					if [ `cat ${u39_file[$j]} | grep -vE '^#|^\s#' | grep -i 'Options' | grep -iv '\-FollowSymLinks' | grep -i 'FollowSymLinks' | wc -l` -gt 0 ]; then
						echo "※ U-39 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
						echo " Apache 설정 파일에 심볼릭 링크 사용을 제한하도록 설정하지 않습니다." >> $resultfile 2>&1
						return 0
					fi
				fi
			done
		fi
	done
	echo "※ U-39 결과 : 양호(Good)" >> $resultfile 2>&1
	return 0
}

U_40() {
	echo ""  >> $resultfile 2>&1
	echo "▶ U-40(상) | 3. 서비스 관리 > 3.22 웹서비스 파일 업로드 및 다운로드 제한 ◀"  >> $resultfile 2>&1
	echo " 양호 판단 기준 : 파일 업로드 및 다운로드를 제한한 경우" >> $resultfile 2>&1
	u40_find=(".htaccess" "httpd.conf" "apache2.conf" "userdir.conf")
	for ((i=0; i<${#u40_find[@]}; i++))
	do		
		if [ `find / -name ${u40_find[$i]} -type f 2>/dev/null | wc -l` -gt 0 ]; then
			u40_file=(`find / -name ${u40_find[$i]} -type f 2>/dev/null`)
			for ((j=0; j<${#u40_file[@]}; j++))
			do
				if [ ${u40_find[$i]} == userdir.conf ]; then
					if [ `cat  ${u40_file[$j]} | grep -vE '^#|^\s#' | grep -i 'userdir' | grep -i 'disabled' | wc -l` -eq 0 ]; then
						if [ `cat ${u40_file[$j]} | grep -vE '^#|^\s#' | grep -i 'LimitRequestBody' | wc -l` -eq 0 ]; then
							echo "※ U-40 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
							echo " Apache 설정 파일에 파일 업로드 및 다운로드를 제한하도록 설정하지 않았습니다." >> $resultfile 2>&1
							return 0
						fi
					fi
				else
					if [ `cat ${u40_file[$j]} | grep -vE '^#|^\s#' | grep -i 'LimitRequestBody' | wc -l` -eq 0 ]; then
						echo "※ U-40 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
						echo " Apache 설정 파일에 파일 업로드 및 다운로드를 제한하도록 설정하지 않았습니다." >> $resultfile 2>&1
						return 0
					fi
				fi
			done
		fi
	done
	echo "※ U-40 결과 : 양호(Good)" >> $resultfile 2>&1
	return 0
}

U_41() {
	echo ""  >> $resultfile 2>&1
	echo "▶ U-41(상) | 3. 서비스 관리 > 3.23 웹서비스 영역의 분리 ◀"  >> $resultfile 2>&1
	echo " 양호 판단 기준 : DocumentRoot를 별도의 디렉터리로 지정한 경우" >> $resultfile 2>&1
	u41_find=(".htaccess" "httpd.conf" "apache2.conf")
	u41_count=0
	for ((i=0; i<${#u41_find[@]}; i++))
	do
		if [ `find / -name ${u41_find[$i]} -type f 2>/dev/null | wc -l` -gt 0 ]; then
			((u41_count++))
			u41_file=(`find / -name ${u41_find[$i]} -type f 2>/dev/null`)
			for ((j=0; j<${#u41_file[@]}; j++))
			do
				if [ `cat ${u41_file[$j]} | grep -vE '^#|^\s#' | grep -i 'DocumentRoot' | grep '/' | wc -l` -gt 0 ]; then
					if [ `cat ${u41_file[$j]} | grep -vE '^#|^\s#' | grep -i 'DocumentRoot' | grep '/' | awk '{gsub(/"/, "", $0); print $2}' | grep -E '/usr/local/apache/htdocs|/usr/local/apache2/htdocs|/var/www/html' | wc -l` -gt 0 ]; then 
						echo "※ U-41 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
						echo " Apache DocumentRoot를 기본 디렉터리로 설정했습니다." >> $resultfile 2>&1
						return 0
					fi
				else
					echo "※ U-41 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
					echo " Apache DocumentRoot를 설정하지 않았습니다." >> $resultfile 2>&1
					return 0
				fi
			done
		fi
	done
	if [ `ps -ef | grep -iE 'httpd|apache2' | grep -v 'grep' | wc -l` -gt 0 ] && [ $u41_count -eq 0 ]; then
		echo "※ U-41 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
		echo " Apache 서비스를 사용하고, DocumentRoot를 설정하는 파일이 없습니다." >> $resultfile 2>&1
		return 0
	else
		echo "※ U-41 결과 : 양호(Good)" >> $resultfile 2>&1
		return 0
	fi
}

U_42() {
	echo ""  >> $resultfile 2>&1
	echo "▶ U-42(상) | 4 패치 관리 > 4.1 최신 보안패치 및 벤더 권고사항 적용 ◀"  >> $resultfile 2>&1
	echo " 양호 판단 기준 : 패치 적용 정책을 수립하여 주기적으로 패치관리를 하고 있으며, 패치 
관련 내용을 확인하고 적용했을 경우" >> $resultfile 2>&1
	echo "※ U-42 결과 : N/A" >> $resultfile 2>&1
	echo " 수동으로 점검하세요." >> $resultfile 2>&1
}

U_43() {
	echo ""  >> $resultfile 2>&1
	echo "▶ U-43(상) | 5. 로그 관리 > 5.1 로그의 정기적 검토 및 보고 ◀"  >> $resultfile 2>&1
	echo " 양호 판단 기준 : 접속기록 등의 보안 로그, 응용 프로그램 및 시스템 로그 기록에 대해 정기적으로 검토, 분석, 리포트 작성 및 보고 등의 조치가 이루어지는 경우" >> $resultfile 2>&1
	echo "※ U-43 결과 : N/A" >> $resultfile 2>&1
	echo " 수동으로 점검하세요." >> $resultfile 2>&1
}

U_44() {
	echo ""  >> $resultfile 2>&1
	echo "▶ U-44(중) | 1. 계정관리 > 1.5 root 이외의 UID가 '0' 금지 ◀"  >> $resultfile 2>&1
	echo " 양호 판단 기준 : root 계정과 동일한 UID를 갖는 계정이 존재하지 않는 경우" >> $resultfile 2>&1
	if [ -f /etc/passwd ]; then
		if [ `awk -F : '$3==0 {print $1}' /etc/passwd | grep -vx 'root' | wc -l` -gt 0 ]; then
			echo "※ U-44 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
			echo " root 계정과 동일한 UID(0)를 갖는 계정이 존재합니다." >> $resultfile 2>&1
			return 0
		else
			echo "※ U-44 결과 : 양호(Good)" >> $resultfile 2>&1
			return 0
		fi
	fi
}

U_45() {
	echo ""  >> $resultfile 2>&1
	echo "▶ U-45(하) | 1. 계정관리 > 1.6 root 계정 su 제한 ◀"  >> $resultfile 2>&1
	echo " 양호 판단 기준 : su 명령어를 특정 그룹에 속한 사용자만 사용하도록 제한되어 있는 경우" >> $resultfile 2>&1
	echo " ### pam_rootok.so 모듈을 사용하지 않는 경우 U_45 함수 수정 필요" >> $resultfile 2>&1
	echo " ### pam_rootok.so 모듈 사용 시 trust 문구를 추가한 경우 U_45 함수 수정 필요" >> $resultfile 2>&1
	if [ `dpkg -l 2>/dev/null | grep 'libpam' | wc -l` -gt 0 ]; then
		# !!! pam_rootok.so 설정을 하지 않은 경우 하단의 첫 번째 if 문을 삭제하세요.
		if [ `cat /etc/pam.d/su | grep -vE '^#|^\s#' | grep 'pam_rootok.so' | wc -l` -gt 0 ]; then
			# !!! pam_wheel.so 설정에 trust 문구를 추가한 경우 하단의 if 문 조건절에 'grep 'trust'를 추가하세요.
			if [ `cat /etc/pam.d/su | grep -vE '^#|^\s#' | grep 'pam_wheel.so' | wc -l` -gt 0 ]; then
				echo "※ U-45 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
				echo " /etc/pam.d/su 파일에 pam_wheel.so 모듈이 없습니다." >> $resultfile 2>&1
				return 0
			fi
		else
			echo "※ U-45 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
			echo " /etc/pam.d/su 파일에서 pam_rootok.so 모듈이 없습니다." >> $resultfile 2>&1
			return 0
		fi
	else
		u45_file=("/bin/su" "/usr/bin/su")
		if [ `which su 2>/dev/null | wc -l` -gt 0 ]; then
			u45_file[${#u45_file[@]}]=`which su 2>/dev/null`
		fi
		for ((i=0; i<${#u45_file[@]}; i++))
		do
			if [ -f ${u45_file[$i]} ]; then
				u45_binsu_group=`stat ${u45_file[$i]} | grep -i 'Uid' | awk '{print $2}' | awk -F / '{print substr($1,4,1)}'`
				if [ $u45_binsu_group -eq 5 ] || [ $u45_binsu_group -eq 4 ] || [ $u45_binsu_group -eq 1 ] || [ $u45_binsu_group -eq 0 ]; then
					if [ `stat ${u45_file[$i]} | grep -i 'Uid' | awk '{print $2}' | awk -F / '{print substr($1,5,1)}'` -ne 0 ]; then
						echo "※ U-45 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
						echo " ${u45_file[$i]} 실행 파일의 다른 사용자(other)에 대한 권한 취약합니다." >> $resultfile 2>&1
						return 0
					fi
				else
					echo "※ U-45 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
					echo " ${u45_file[$i]} 실행 파일의 그룹 사용자(group)에 대한 권한 취약합니다." >> $resultfile 2>&1
					return 0
				fi
			fi
		done
	fi
	echo "※ U-45 결과 : 양호(Good)" >> $resultfile 2>&1
	return 0
}

U_46() {
	echo ""  >> $resultfile 2>&1
	echo "▶ U-46(중) | 1. 계정관리 > 1.7 패스워드 최소 길이 설정 ◀"  >> $resultfile 2>&1
	echo " 양호 판단 기준 : 패스워드 최소 길이가 8자 이상으로 설정되어 있는 경우" >> $resultfile 2>&1
	u46_count_file=0
	u46_count2_file=0
	u46_count2_B=0
	if [ -f /etc/login.defs ]; then
		((u46_count_file++))
		((u46_count2_file++))
		if [ `cat /etc/login.defs | grep -vE '^#|^\s#' | grep -i 'PASS_MIN_LEN' | awk '{print $2}' | wc -l` -gt 0 ]; then
			if [ `cat /etc/login.defs | grep -vE '^#|^\s#' | grep -i 'PASS_MIN_LEN' | awk '{print $2}'` -lt 8 ]; then
				echo "※ U-46 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
				echo " /etc/login.defs 파일에서 패스워드 최소 길이가 8 미만으로 설정되어 있습니다." >> $resultfile 2>&1
				return 0
			fi
		else
			((u46_count2_B++))
		fi
	fi
	if [ -f /etc/security/pwquality.conf ]; then
		((u46_count_file++))
		((u46_count2_file++))
		if [ `cat /etc/security/pwquality.conf | grep -vE '^#|^\s#' | grep -i 'minlen' | wc -l` -gt 0 ]; then
			if [ `cat /etc/security/pwquality.conf | grep -vE '^#|^\s#' | grep -i 'minlen' | awk -F 'minlen' '{gsub(" ", "", $0); print substr($2,2,1)}'` -lt 8 ]; then
				echo "※ U-46 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
				echo " /etc/security/pwquality.defs 파일에서 패스워드 최소 길이가 8 미만으로 설정되어 있습니다." >> $resultfile 2>&1
				return 0
			else
				if [ -f /etc/pam.d/common-password ]; then
					if [ `cat /etc/pam.d/common-password | grep -vE '^#|^\s#' | grep -i 'pam_pwquality.so' | wc -l` -eq 0 ]; then
						echo "※ U-46 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
						echo " /etc/security/pwquality.conf 파일에 최소 길이(minlen)를 8 이상으로 설정하고, /etc/pam.d/common-password 파일에 pam_pwquality.so 모듈을 추가하지 않았습니다." >> $resultfile 2>&1
						return 0
					fi
				else
					echo "※ U-46 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
					echo " /etc/security/pwquality.conf 파일에 최소 길이(minlen)를 8 이상으로 설정하고, /etc/pam.d/common-password 파일에 pam_pwquality.so 모듈을 추가하지 않았습니다." >> $resultfile 2>&1
					return 0
				fi
			fi
		else
			((u46_count2_B++))
		fi
	fi
	if [ -f /etc/pam.d/common-password ]; then
		((u46_count_file++))
		u46_module=("pam_pwquality.so" "pam_cracklib.so" "pam_unix.so")
		for ((z=0; z<${#u46_module[@]}; z++))
		do
			((u46_count2_file++))
			if [ `cat /etc/pam.d/common-password | grep -vE '^#|^\s#' | grep -i 'minlen' | grep -i ${u46_module[$z]} | wc -l` -gt 0 ]; then
				u46_name=`cat /etc/pam.d/common-password | grep -vE '^#|^\s#' | grep -i 'minlen' | grep -i ${u46_module[$z]} | awk '{gsub(" ", "", $0); print}'`
				if [ `echo $u46_name | awk -F 'minlen' '{print substr($2,2,1)}'` -lt 8 ]; then
					echo "※ U-46 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
					echo " /etc/pam.d/common-password 파일에서 패스워드 최소 길이가 8 미만으로 설정되어 있습니다." >> $resultfile 2>&1
					return 0
				fi
			else
				((u46_count2_B++))
			fi
		done
	fi
	if [ $u46_count_file -eq 0 ]; then
		echo "※ U-46 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
		echo " 패스워드 최소 길이를 설정하는 파일이 없습니다." >> $resultfile 2>&1
		return 0
	elif [ $u46_count2_file -eq $u46_count2_B ]; then
		echo "※ U-46 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
		echo " 패스워드 최소 길이를 설정한 파일이 없습니다." >> $resultfile 2>&1
		return 0
	else
		echo "※ U-46 결과 : 양호(Good)" >> $resultfile 2>&1
		return 0
	fi
}

U_47() {
	echo ""  >> $resultfile 2>&1
	echo "▶ U-47(중) | 1. 계정관리 > 1.8 패스워드 최대 사용기간 설정 ◀"  >> $resultfile 2>&1
	echo " 양호 판단 기준 : 패스워드 최대 사용기간이 90일(12주) 이하로 설정되어 있는 경우" >> $resultfile 2>&1
	if [ -f /etc/login.defs ]; then
		if [ `cat /etc/login.defs | grep -vE '^#|^\s#' | grep -i 'PASS_MAX_DAYS' | awk '{print $2}' | wc -l` -gt 0 ]; then
			if [ `cat /etc/login.defs | grep -vE '^#|^\s#' | grep -i 'PASS_MAX_DAYS' | awk '{print $2}'` -gt 90 ]; then
				echo "※ U-47 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
				echo " /etc/login.defs 파일에 패스워드 최대 사용 기간이 91일 이상으로 설정되어 있습니다." >> $resultfile 2>&1
				return 0
			else
				echo "※ U-47 결과 : 양호(Good)" >> $resultfile 2>&1
				return 0
			fi
		else
			echo "※ U-47 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
			echo " /etc/login.defs 파일에 패스워드 최대 사용 기간이 설정되어 있지 않습니다." >> $resultfile 2>&1
			return 0
		fi
	else
		echo "※ U-47 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
		echo " /etc/login.defs 파일이 없습니다." >> $resultfile 2>&1
		return 0
	fi
}

U_48() {
	echo ""  >> $resultfile 2>&1
	echo "▶ U-48(중) | 1. 계정관리 > 1.9 패스워드 최소 사용기간 설정 ◀"  >> $resultfile 2>&1
	echo " 양호 판단 기준 : 패스워드 최소 사용기간이 1일 이상 설정되어 있는 경우" >> $resultfile 2>&1
	if [ -f /etc/login.defs ]; then
		if [ `cat /etc/login.defs | grep -vE '^#|^\s#' | grep -i 'PASS_MIN_DAYS' | awk '{print $2}' | wc -l` -gt 0 ]; then
			if [ `cat /etc/login.defs | grep -vE '^#|^\s#' | grep -i 'PASS_MIN_DAYS' | awk '{print $2}'` -lt 1 ]; then
				echo "※ U-48 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
				echo " /etc/login.defs 파일에 패스워드 최소 사용 기간이 1일 미만으로 설정되어 있습니다." >> $resultfile 2>&1
				return 0
			else
				echo "※ U-48 결과 : 양호(Good)" >> $resultfile 2>&1
				return 0
			fi
		else
			echo "※ U-48 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
			echo " /etc/login.defs 파일에 패스워드 최소 사용 기간이 설정되어 있지 않습니다." >> $resultfile 2>&1
			return 0
		fi
	else
		echo "※ U-48 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
		echo " /etc/login.defs 파일이 없습니다." >> $resultfile 2>&1
		return 0
	fi
}

U_49() {
	echo ""  >> $resultfile 2>&1
	echo "▶ U-49(하) | 1. 계정관리 > 1.10 불필요한 계정 제거 ◀"  >> $resultfile 2>&1
	echo " 양호 판단 기준 : 불필요한 계정이 존재하지 않는 경우" >> $resultfile 2>&1
	echo " ### 로그를 통한 확인은 수동으로 점검하세요." >> $resultfile 2>&1
	echo " ### 불필요한 계정에 대한 변경 필요 시 U_49 함수 수정 필요" >> $resultfile 2>&1
	echo " ### 불필요한 계정 = daemon, bin, sys, adm, listen, nobody, nobody4, noaccess, diag, operator, gopher, games, ftp, apache, httpd, www-data, mysql, mariadb, postgres, mail, postfix, news, lp, uucp, nuucp" >> $resultfile 2>&1
	if [ -f /etc/passwd ]; then
		# !!! 불필요한 계정을 변경할 경우 하단의 grep 명령어를 수정하세요.
		if [ `cat /etc/passwd | awk -F : '{print $1}' | grep -wE 'daemon|bin|sys|adm|listen|nobody|nobody4|noaccess|diag|operator|gopher|games|ftp|apache|httpd|www-data|mysql|mariadb|postgres|mail|postfix|news|lp|uucp|nuucp' | wc -l` -gt 0 ]; then
			echo "※ U-49 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
			echo " 불필요한 계정이 존재합니다." >> $resultfile 2>&1
			return 0
		fi
	fi
	echo "※ U-49 결과 : 양호(Good)" >> $resultfile 2>&1
	return 0
}

U_50() {
	echo ""  >> $resultfile 2>&1
	echo "▶ U-50(하) | 1. 계정관리 > 1.11 관리자 그룹에 최소한의 계정 포함 ◀"  >> $resultfile 2>&1
	echo " 양호 판단 기준 : 관리자 그룹에 불필요한 계정이 등록되어 있지 않은 경우" >> $resultfile 2>&1
	echo " ### 불필요한 계정에 대한 변경 필요 시 U_50 함수 수정 필요" >> $resultfile 2>&1
	echo " ### 불필요한 계정 = daemon, bin, sys, adm, listen, nobody, nobody4, noaccess, diag, operator, gopher, games, ftp, apache, httpd, www-data, mysql, mariadb, postgres, mail, postfix, news, lp, uucp, nuucp" >> $resultfile 2>&1
	if [ -f /etc/group ]; then
		# !!! 불필요한 계정에 대한 변경은 하단의 grep 명령어를 수정하세요.
		if [ `cat /etc/group | awk -F : '$1=="root" {gsub(" ", "", $0); print $4}' | awk '{gsub(",","\n",$0); print}' | grep -wE 'daemon|bin|sys|adm|listen|nobody|nobody4|noaccess|diag|operator|gopher|games|ftp|apache|httpd|www-data|mysql|mariadb|postgres|mail|postfix|news|lp|uucp|nuucp' | wc -l` -gt 0 ]; then
			echo "※ U-50 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
			echo " 관리자 그룹(root)에 불필요한 계정이 등록되어 있습니다." >> $resultfile 2>&1
			return 0
		fi
	fi
	echo "※ U-50 결과 : 양호(Good)" >> $resultfile 2>&1
	return 0
}

U_51() {
	echo ""  >> $resultfile 2>&1
	echo "▶ U-51(하) | 1. 계정관리 > 1.12 계정이 존재하지 않는 GID 금지 ◀"  >> $resultfile 2>&1
	echo " 양호 판단 기준 : 시스템 관리나 운용에 불필요한 그룹이 삭제 되어있는 경우" >> $resultfile 2>&1
	echo " ### 불필요한 그룹 = 그룹에 계정이 존재하지 않는 그룹" >> $resultfile 2>&1
	u51_group=(`cat /etc/group | grep -vE '^#|^\s#' | awk -F : '$3>=500 && $4==null {print $3}' | uniq`)
	for ((i=0; i<${#u51_group[@]}; i++))
	do
		if [ `cat /etc/passwd | awk -F : '{print $4}' | uniq | grep ${u51_group[$i]} | wc -l` -eq 0 ]; then
			echo "※ U-51 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
			echo " 불필요한 그룹이 존재합니다." >> $resultfile 2>&1
			return 0
		fi
	done
	echo "※ U-51 결과 : 양호(Good)" >> $resultfile 2>&1
	return 0
}

U_52() {
	echo ""  >> $resultfile 2>&1
	echo "▶ U-52(중) | 1. 계정관리 > 1.13 동일한 UID 금지 ◀"  >> $resultfile 2>&1
	echo " 양호 판단 기준 : 동일한 UID로 설정된 사용자 계정이 존재하지 않는 경우" >> $resultfile 2>&1
	if [ -f /etc/passwd ]; then
		if [ `cat /etc/passwd | awk -F : '{print $3}' | sort | uniq -d | wc -l` -gt 0 ]; then
			echo "※ U-52 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
			echo " 동일한 UID로 설정된 사용자 계정이 존재합니다." >> $resultfile 2>&1
			return 0
		fi
	fi
	echo "※ U-52 결과 : 양호(Good)" >> $resultfile 2>&1
	return 0
}

U_53() {
	echo ""  >> $resultfile 2>&1
	echo "▶ U-53(하) | 1. 계정관리 > 1.14 사용자 shell 점검 ◀"  >> $resultfile 2>&1
	echo " 양호 판단 기준 : 로그인이 필요하지 않은 계정에 /bin/false(/sbin/nologin) 쉘이 부여되어 있는 경우" >> $resultfile 2>&1
	echo " ### 불필요한 계정에 대한 변경 필요 시 U_53 함수 수정 필요" >> $resultfile 2>&1
	echo " ### 불필요한 계정 = daemon, bin, sys, adm, listen, nobody, nobody4, noaccess, diag, operator, gopher, games, ftp, apache, httpd, www-data, mysql, mariadb, postgres, mail, postfix, news, lp, uucp, nuucp" >> $resultfile 2>&1
	if [ -f /etc/passwd ]; then
		# !!! 불필요한 계정에 대한 변경은 하단의 grep 명령어를 수정하세요.
		if [ `cat /etc/passwd | grep -E '^(daemon|bin|sys|adm|listen|nobody|nobody4|noaccess|diag|operator|gopher|games|ftp|apache|httpd|www-data|mysql|mariadb|postgres|mail|postfix|news|lp|uucp|nuucp):' | awk -F : '$7!="/bin/false" && $7!="/sbin/nologin" {print}' | wc -l` -gt 0 ]; then
			echo "※ U-53 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
			echo " 로그인이 필요하지 않은 불필요한 계정에 /bin/false 또는 /sbin/nologin 쉘이 부여되지 않았습니다." >> $resultfile 2>&1
			return 0
		fi
	fi
	echo "※ U-53 결과 : 양호(Good)" >> $resultfile 2>&1
	return 0
}

U_54() {
	echo ""  >> $resultfile 2>&1
	echo "▶ U-54(하) | 1. 계정관리 > 1.15 Session Timeout 설정 ◀"  >> $resultfile 2>&1
	echo " 양호 판단 기준 : Session Timeout이 600초(10분) 이하로 설정되어 있는 경우" >> $resultfile 2>&1
	u54_count=0
	u54_count2=0
	if [ -f /etc/profile ]; then
		((u54_count++))
		if [ `cat /etc/profile | grep -vE '^#|^\s#' | grep -i 'TMOUT' | awk -F = '{gsub(" ", "", $0); print $2}' | wc -l` -gt 0 ]; then
			if [ `cat /etc/profile | grep -vE '^#|^\s#' | grep -i 'TMOUT' | awk -F = '{gsub(" ", "", $0); print $2}'` -gt 600 ]; then
				echo "※ U-54 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
				echo " /etc/profile 파일에 세션 타임아웃이 600초 이하로 설정되지 않았습니다." >> $resultfile 2>&1
				return 0
			fi
		else
			((u54_count2++))
		fi
	fi
	u54_home=(`cat /etc/passwd | awk -F : '$7!="/bin/false" && $7!="/sbin/nologin" && $6!=null {print $6}' | uniq`)
	u54_home2=(/home/*)
	for ((j=0; j<${#u54_home2[@]}; j++))
	do
		u54_home[${#u54_home[@]}]=${u54_home2[$j]}
	done
	for ((i=0; i<${#u54_home[@]}; i++))
	do
		if [ -f ${u54_home[$i]}/.profile ]; then
			((u54_count++))
			if [ `cat ${u54_home[$i]}/.profile | grep -vE '^#|^\s#' | grep -i 'TMOUT' | awk -F = '{gsub(" ", "", $0); print $2}' | wc -l` -gt 0 ]; then
				if [ `cat ${u54_home[$i]}/.profile | grep -vE '^#|^\s#' | grep -i 'TMOUT' | awk -F = '{gsub(" ", "", $0); print $2}'` -gt 600 ]; then
					echo "※ U-54 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
					echo " ${u54_home[$i]}/.profile 파일에 세션 타임아웃이 600초 이하로 설정되지 않았습니다." >> $resultfile 2>&1
					return 0
				fi
			else
				((u54_count2++))
			fi
		fi
	done
	if [ -f /etc/csh.login ]; then
		((u54_count++))
		if [ `cat /etc/csh.login | grep -vE '^#|^\s#' | grep -i 'set' | grep -i 'autologout' | awk -F = '{gsub(" ", "", $0); print $2}' | wc -l` -gt 0 ]; then
			if [ `cat /etc/csh.login | grep -vE '^#|^\s#' | grep -i 'set' | grep -i 'autologout' | awk -F = '{gsub(" ", "", $0); print $2}'` -gt 10 ]; then
				echo "※ U-54 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
				echo " /etc/csh.login 파일에 세션 타임아웃이 10분 이하로 설정되지 않았습니다." >> $resultfile 2>&1
				return 0
			fi
		else
			((u54_count2++))
		fi
	fi
	if [ -f /etc/csh.cshrc ]; then
		((u54_count++))
		if [ `cat /etc/csh.cshrc | grep -vE '^#|^\s#' | grep -i 'set' | grep -i 'autologout' | awk -F = '{gsub(" ", "", $0); print $2}' | wc -l` -gt 10 ]; then
			if [ `cat /etc/csh.cshrc | grep -vE '^#|^\s#' | grep -i 'set' | grep -i 'autologout' | awk -F = '{gsub(" ", "", $0); print $2}'` -gt 10 ]; then
				echo "※ U-54 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
				echo " /etc/csh.cshrc 파일에 세션 타임아웃이 10분 이하로 설정되지 않았습니다." >> $resultfile 2>&1
				return 0
			fi
		else
			((u54_count2++))
		fi
	fi
	if [ $u54_count -eq 0 ]; then
		echo "※ U-54 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
		echo " 세션 타임아웃을 설정하는 파일이 없습니다." >> $resultfile 2>&1
		return 0
	elif [ $u54_count -eq $u54_count2 ]; then
		echo "※ U-54 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
		echo " 세션 타임아웃을 설정한 파일이 없습니다." >> $resultfile 2>&1
		return 0
	else
		echo "※ U-54 결과 : 양호(Good)" >> $resultfile 2>&1
		return 0
	fi
}

U_55() {
	echo ""  >> $resultfile 2>&1
	echo "▶ U-55(하) | 2. 파일 및 디렉토리 관리 > 2.15 hosts.lpd 파일 소유자 및 권한 설정 ◀"  >> $resultfile 2>&1
	echo " 양호 판단 기준 : hosts.lpd 파일이 삭제되어 있거나 불가피하게 hosts.lpd 파일을 사용할 시 파일의 소유자가 root이고 권한이 600인 경우" >> $resultfile 2>&1
	if [ -f /etc/hosts.lpd ]; then
		if [ `ls -l /etc/hosts.lpd | awk '{print $3}'` == root ]; then
			if [ `stat /etc/hosts.lpd | grep -i 'Uid' | awk '{print $2}' | awk -F / '{print substr($1,3,3)}'` -eq 600 ]; then
				echo "※ U-55 결과 : 양호(Good)" >> $resultfile 2>&1
				return 0
			else
				echo "※ U-55 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
				echo " /etc/hosts.lpd 파일의 권한이 600이 아닙니다." >> $resultfile 2>&1
				return 0
			fi
		else
			echo "※ U-55 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
			echo " /etc/hosts.lpd 파일의 소유자(owner)가 root가 아닙니다." >> $resultfile 2>&1
			return 0
		fi
	else
		echo "※ U-55 결과 : 양호(Good)" >> $resultfile 2>&1
		return 0
	fi
}

U_56() {
	echo ""  >> $resultfile 2>&1
	echo "▶ U-56(중) | 2. 파일 및 디렉토리 관리 > 2.17 UMASK 설정 관리 ◀"  >> $resultfile 2>&1
	echo " 양호 판단 기준 : UMASK 값이 022 이상으로 설정된 경우" >> $resultfile 2>&1
	u56_umask=`umask`
	if [ ${u56_umask:2:1} -lt 2 ]; then
		echo "※ U-56 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
		echo " 그룹 사용자(group)에 대한 umask 값이 2 이상으로 설정되지 않았습니다." >> $resultfile 2>&1
		return 0
	elif [ ${u56_umask:3:1} -lt 2 ]; then
		echo "※ U-56 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
		echo " 다른 사용자(other)에 대한 umask 값이 2 이상으로 설정되지 않았습니다." >> $resultfile 2>&1
		return 0
	fi
	if [ -f /etc/profile ]; then
		if [ `cat /etc/profile | grep -vE '^#|^\s#' | grep -i 'umask' | grep -vE 'if|\`' | grep '=' | wc -l` -gt 0 ]; then
			u56_umask=(`cat /etc/profile | grep -vE '^#|^\s#' | grep -i 'umask' | grep -vE 'if|\`' | awk -F = '{gsub(" ", "", $0); print $2}'`)
			for ((i=0; i<${#u56_umask[@]}; i++))
			do
				if [ ${#u56_umask[$i]} -eq 2 ]; then
					if [ ${u56_umask[$i]:0:1} -lt 2 ]; then
						echo "※ U-56 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
						echo " /etc/profile 파일에 그룹 사용자(group)에 대한 umask 값이 2 이상으로 설정되지 않았습니다." >> $resultfile 2>&1
						return 0
					elif [ ${u56_umask[$i]:1:1} -lt 2 ]; then
						echo "※ U-56 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
						echo " /etc/profile 파일에 다른 사용자(other)에 대한 umask 값이 2 이상으로 설정되지 않았습니다." >> $resultfile 2>&1
						return 0
					fi
				elif [ ${#u56_umask[$i]} -eq 4 ]; then
					if [ ${u56_umask[$i]:2:1} -lt 2 ]; then
						echo "※ U-56 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
						echo " /etc/profile 파일에 그룹 사용자(group)에 대한 umask 값이 2 이상으로 설정되지 않았습니다." >> $resultfile 2>&1
						return 0
					elif [ ${u56_umask[$i]:3:1} -lt 2 ]; then
						echo "※ U-56 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
						echo " /etc/profile 파일에 다른 사용자(other)에 대한 umask 값이 2 이상으로 설정되지 않았습니다." >> $resultfile 2>&1
						return 0
					fi
				elif [ ${#u56_umask[$i]} -eq 3 ]; then
					if [ ${u56_umask[$i]:1:1} -lt 2 ]; then
						echo "※ U-56 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
						echo " /etc/profile 파일에 그룹 사용자(group)에 대한 umask 값이 2 이상으로 설정되지 않았습니다." >> $resultfile 2>&1
						return 0
					elif [ ${u56_umask[$i]:2:1} -lt 2 ]; then
						echo "※ U-56 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
						echo " /etc/profile 파일에 다른 사용자(other)에 대한 umask 값이 2 이상으로 설정되지 않았습니다." >> $resultfile 2>&1
						return 0
					fi
				elif [ ${#u56_umask[$i]} -eq 1 ]; then
					echo "※ U-56 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
					echo " /etc/profile 파일에 umask 값이 0022 이상으로 설정되지 않았습니다." >> $resultfile 2>&1
					return 0
				else
					echo "※ U-56 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
					echo " /etc/profile 파일에 설정된 umask 값이 보안 설정에 부합하지 않습니다." >> $resultfile 2>&1
					return 0
				fi
			done
		elif [ `cat /etc/profile | grep -vE '^#|^\s#' | grep -i 'umask' | grep -vE 'if|\`' | awk '{print $2}' | wc -l` -gt 0 ]; then
			u56_umask=(`cat /etc/profile | grep -vE '^#|^\s#' | grep -i 'umask' | grep -vE 'if|\`' | awk '{print $2}'`)
			for ((i=0; i<${#u56_umask[@]}; i++))
			do
				if [ ${#u56_umask[$i]} -eq 2 ]; then
					if [ ${u56_umask[$i]:0:1} -lt 2 ]; then
						echo "※ U-56 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
						echo " /etc/profile 파일에 그룹 사용자(group)에 대한 umask 값이 2 이상으로 설정되지 않았습니다." >> $resultfile 2>&1
						return 0
					elif [ ${u56_umask[$i]:1:1} -lt 2 ]; then
						echo "※ U-56 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
						echo " /etc/profile 파일에 다른 사용자(other)에 대한 umask 값이 2 이상으로 설정되지 않았습니다." >> $resultfile 2>&1
						return 0
					fi
				elif [ ${#u56_umask[$i]} -eq 4 ]; then
					if [ ${u56_umask[$i]:2:1} -lt 2 ]; then
						echo "※ U-56 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
						echo " /etc/profile 파일에 그룹 사용자(group)에 대한 umask 값이 2 이상으로 설정되지 않았습니다." >> $resultfile 2>&1
						return 0
					elif [ ${u56_umask[$i]:3:1} -lt 2 ]; then
						echo "※ U-56 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
						echo " /etc/profile 파일에 다른 사용자(other)에 대한 umask 값이 2 이상으로 설정되지 않았습니다." >> $resultfile 2>&1
						return 0
					fi
				elif [ ${#u56_umask[$i]} -eq 3 ]; then
					if [ ${u56_umask[$i]:1:1} -lt 2 ]; then
						echo "※ U-56 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
						echo " /etc/profile 파일에 그룹 사용자(group)에 대한 umask 값이 2 이상으로 설정되지 않았습니다." >> $resultfile 2>&1
						return 0
					elif [ ${u56_umask[$i]:2:1} -lt 2 ]; then
						echo "※ U-56 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
						echo " /etc/profile 파일에 다른 사용자(other)에 대한 umask 값이 2 이상으로 설정되지 않았습니다." >> $resultfile 2>&1
						return 0
					fi
				elif [ ${#u56_umask[$i]} -eq 1 ]; then
					echo "※ U-56 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
					echo " /etc/profile 파일에 umask 값이 0022 이상으로 설정되지 않았습니다." >> $resultfile 2>&1
					return 0
				else
					echo "※ U-56 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
					echo " /etc/profile 파일에 설정된 umask 값이 보안 설정에 부합하지 않습니다." >> $resultfile 2>&1
					return 0
				fi
			done
		fi
	fi
	u56_file=("/etc/bashrc" "/etc/csh.login" "/etc/csh.cshrc")
	for ((a=0; a<${#u56_file[@]}; a++))
	do
		if [ -f ${u56_file[$a]} ]; then
			if [ `cat ${u56_file[$a]} | grep -vE '^#|^\s#' | grep -i 'umask' | grep -vE 'if|\`' | awk '{print $2}' | wc -l` -gt 0 ]; then
				u56_umask=(`cat ${u56_file[$a]} | grep -vE '^#|^\s#' | grep -i 'umask' | grep -vE 'if|\`' | awk '{print $2}'`)
				for ((i=0; i<${#u56_umask[@]}; i++))
				do
					if [ ${#u56_umask[$i]} -eq 2 ]; then
						if [ ${u56_umask[$i]:0:1} -lt 2 ]; then
							echo "※ U-56 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
							echo " ${u56_file[$a]} 파일에 그룹 사용자(group)에 대한 umask 값이 2 이상으로 설정되지 않았습니다." >> $resultfile 2>&1
							return 0
						elif [ ${u56_umask[$i]:1:1} -lt 2 ]; then
							echo "※ U-56 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
							echo " ${u56_file[$a]} 파일에 다른 사용자(other)에 대한 umask 값이 2 이상으로 설정되지 않았습니다." >> $resultfile 2>&1
							return 0
						fi
					elif [ ${#u56_umask[$i]} -eq 4 ]; then
						if [ ${u56_umask[$i]:2:1} -lt 2 ]; then
							echo "※ U-56 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
							echo " ${u56_file[$a]} 파일에 그룹 사용자(group)에 대한 umask 값이 2 이상으로 설정되지 않았습니다." >> $resultfile 2>&1
							return 0
						elif [ ${u56_umask[$i]:3:1} -lt 2 ]; then
							echo "※ U-56 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
							echo " ${u56_file[$a]} 파일에 다른 사용자(other)에 대한 umask 값이 2 이상으로 설정되지 않았습니다." >> $resultfile 2>&1
							return 0
						fi
					elif [ ${#u56_umask[$i]} -eq 3 ]; then
						if [ ${u56_umask[$i]:1:1} -lt 2 ]; then
							echo "※ U-56 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
							echo " ${u56_file[$a]} 파일에 그룹 사용자(group)에 대한 umask 값이 2 이상으로 설정되지 않았습니다." >> $resultfile 2>&1
							return 0
						elif [ ${u56_umask[$i]:2:1} -lt 2 ]; then
							echo "※ U-56 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
							echo " ${u56_file[$a]} 파일에 다른 사용자(other)에 대한 umask 값이 2 이상으로 설정되지 않았습니다." >> $resultfile 2>&1
							return 0
						fi
					elif [ ${#u56_umask[$i]} -eq 1 ]; then
						echo "※ U-56 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
						echo " ${u56_file[$a]} 파일에 umask 값이 0022 이상으로 설정되지 않았습니다." >> $resultfile 2>&1
						return 0
					else
						echo "※ U-56 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
						echo " ${u56_file[$a]} 파일에 설정된 umask 값이 보안 설정에 부합하지 않습니다." >> $resultfile 2>&1
						return 0
					fi
				done
			fi
		fi
	done
	u56_home=(`cat /etc/passwd | awk -F : '$7!="/bin/false" && $7!="/sbin/nologin" && $6!=null {print $6}' | uniq`)
	u56_home2=(/home/*)
	for ((j=0; j<${#u56_home2[@]}; j++))
	do
		u56_home[${#u56_home[@]}]=${u56_home2[$j]}
	done
	u56_file=(".cshrc" ".profile" ".login" ".bashrc" ".kshrc")
	for ((i=0; i<${#u56_home[@]}; i++))
	do
		for ((j=0; j<${#u56_file[@]}; j++))
		do
			if [ -f ${u56_home[$i]}/${u56_file[$j]} ]; then
				if [ `cat ${u56_home[$i]}/${u56_file[$j]} | grep -vE '^#|^\s#' | grep -i 'umask' | grep -vE 'if|\`' | awk '{print $2}' | wc -l` -gt 0 ]; then
					u56_umask=(`cat ${u56_home[$i]}/${u56_file[$j]} | grep -vE '^#|^\s#' | grep -i 'umask' | grep -vE 'if|\`' | awk '{print $2}'`)
					for ((a=0; a<${#u56_umask[@]}; a++))
					do
						if [ ${#u56_umask[$a]} -eq 2 ]; then
							if [ ${u56_umask[$a]:0:1} -lt 2 ]; then
								echo "※ U-56 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
								echo " ${u56_home[$i]}/${u56_file[$j]} 파일에 그룹 사용자(group)에 대한 umask 값이 2 이상으로 설정되지 않았습니다." >> $resultfile 2>&1
								return 0
							elif [ ${u56_umask[$a]:1:1} -lt 2 ]; then
								echo "※ U-56 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
								echo " ${u56_home[$i]}/${u56_file[$j]} 파일에 다른 사용자(other)에 대한 umask 값이 2 이상으로 설정되지 않았습니다." >> $resultfile 2>&1
								return 0
							fi
						elif [ ${#u56_umask[$a]} -eq 4 ]; then
							if [ ${u56_umask[$a]:2:1} -lt 2 ]; then
								echo "※ U-56 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
								echo " ${u56_home[$i]}/${u56_file[$j]} 파일에 그룹 사용자(group)에 대한 umask 값이 2 이상으로 설정되지 않았습니다." >> $resultfile 2>&1
								return 0
							elif [ ${u56_umask[$a]:3:1} -lt 2 ]; then
								echo "※ U-56 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
								echo " ${u56_home[$i]}/${u56_file[$j]} 파일에 다른 사용자(other)에 대한 umask 값이 2 이상으로 설정되지 않았습니다." >> $resultfile 2>&1
								return 0
							fi
						elif [ ${#u56_umask[$a]} -eq 3 ]; then
							if [ ${u56_umask[$a]:1:1} -lt 2 ]; then
								echo "※ U-56 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
								echo " ${u56_home[$i]}/${u56_file[$j]} 파일에 그룹 사용자(group)에 대한 umask 값이 2 이상으로 설정되지 않았습니다." >> $resultfile 2>&1
								return 0
							elif [ ${u56_umask[$a]:2:1} -lt 2 ]; then
								echo "※ U-56 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
								echo " ${u56_home[$i]}/${u56_file[$j]} 파일에 다른 사용자(other)에 대한 umask 값이 2 이상으로 설정되지 않았습니다." >> $resultfile 2>&1
								return 0
							fi
						elif [ ${#u56_umask[$a]} -eq 1 ]; then
							echo "※ U-56 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
							echo " ${u56_home[$i]}/${u56_file[$j]} 파일에 umask 값이 0022 이상으로 설정되지 않았습니다." >> $resultfile 2>&1
							return 0
						else
							echo "※ U-56 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
							echo " ${u56_home[$i]}/${u56_file[$j]} 파일에 설정된 umask 값이 보안 설정에 부합하지 않습니다." >> $resultfile 2>&1
							return 0
						fi
					done
				fi
			fi
		done
	done
	echo "※ U-56 결과 : 양호(Good)" >> $resultfile 2>&1
	return 0
}

U_57() {
	echo ""  >> $resultfile 2>&1
	echo "▶ U-57(중) | 2. 파일 및 디렉토리 관리 > 2.18 홈디렉토리 소유자 및 권한 설정 ◀"  >> $resultfile 2>&1
	echo " 양호 판단 기준 : 홈 디렉터리 소유자가 해당 계정이고, 타 사용자 쓰기 권한이 제거된 경우" >> $resultfile 2>&1
	u57_user=(`cat /etc/passwd | awk -F : '$7!="/bin/false" && $7!="/sbin/nologin" && $6!=null {print $1}'`)
	u57_home2=(/home/*)
	for ((i=0; i<${#u57_home2[@]}; i++))
	do
		u57_user[${#u57_user[@]}]=`echo ${u57_home2[$i]} | awk -F / '{print $3}'`
	done
	u57_home=(`cat /etc/passwd | awk -F : '$7!="/bin/false" && $7!="/sbin/nologin" && $6!=null {print $6}'`)
	for ((j=0; j<${#u57_home2[@]}; j++))
	do
		u57_home[${#u57_home[@]}]=${u57_home2[$j]}
	done
	for ((l=0; l<${#u57_home[@]}; l++))
	do
		if [ -d ${u57_home[$l]} ]; then
			if [ `ls -ld ${u57_home[$l]} | awk '{print $3}'` == ${u57_user[$l]} ]; then
				u57_other=`stat ${u57_home[$l]} | grep -i 'Uid' | awk '{print $2}' | awk -F / '{print substr($1,5,1)}'`
				if [ $u57_other -eq 7 ] || [ $u57_other -eq 6 ] || [ $u57_other -eq 3 ] || [ $u57_other -eq 2 ]; then
					echo "※ U-57 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
					echo " ${u57_home[$l]} 홈 디렉터리에 다른 사용자(other)의 쓰기 권한이 부여되어 있습니다." >> $resultfile 2>&1
					return 0
				fi
			else
				echo "※ U-57 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
				echo " ${u57_home[$l]} 홈 디렉터리의 소유자가 ${u57_user[$l]}이(가) 아닙니다." >> $resultfile 2>&1
				return 0
			fi
		fi
	done
	echo "※ U-57 결과 : 양호(Good)" >> $resultfile 2>&1
	return 0
}

U_58() {
	echo ""  >> $resultfile 2>&1
	echo "▶ U-58(중) | 2. 파일 및 디렉토리 관리 > 2.19 홈디렉토리로 지정한 디렉토리의 존재 관리 ◀"  >> $resultfile 2>&1
	echo " 양호 판단 기준 : 홈 디렉터리가 존재하지 않는 계정이 발견되지 않는 경우" >> $resultfile 2>&1
	if [ `cat /etc/passwd | awk -F : '$7!="/bin/false" && $7!="/sbin/nologin" && $6==null' | wc -l` -gt 0 ]; then
		echo "※ U-58 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
		echo " 홈 디렉터리가 존재하지 않는 계정이 있습니다." >> $resultfile 2>&1
		return 0
	else
		if [ `cat /etc/passwd | awk -F : '$7!="/bin/false" && $7!="/sbin/nologin" && $1!="root" && $6=="/"' | wc -l` -gt 0 ]; then
			echo "※ U-58 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
			echo " 관리자 계정(root)이 아닌데 홈 디렉터리가 '/'로 설정된 계정이 있습니다." >> $resultfile 2>&1
			return 0
		else
			echo "※ U-58 결과 : 양호(Good)" >> $resultfile 2>&1
			return 0
		fi
	fi
}

U_59() {
	echo ""  >> $resultfile 2>&1
	echo "▶ U-59(하) | 2. 파일 및 디렉토리 관리 > 2.20 숨겨진 파일 및 디렉토리 검색 및 제거 ◀"  >> $resultfile 2>&1
	echo " 양호 판단 기준 : 불필요하거나 의심스러운 숨겨진 파일 및 디렉터리를 삭제한 경우" >> $resultfile 2>&1
	if [ `find / -name '.*' -type f 2>/dev/null | wc -l` -gt 0 ]; then
		echo "※ U-59 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
		echo " 숨겨진 파일이 있습니다." >> $resultfile 2>&1
		return 0
	elif [ `find / -name '.*' -type d 2>/dev/null | wc -l` -gt 0 ]; then
		echo "※ U-59 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
		echo " 숨겨진 디렉터리가 있습니다." >> $resultfile 2>&1
		return 0
	else
		echo "※ U-59 결과 : 양호(Good)" >> $resultfile 2>&1$resultfile 2>&1
		return 0
	fi
}

U_60() {
	echo ""  >> $resultfile 2>&1
	echo "▶ U-60(중) | 3. 서비스 관리 > 3.24 ssh 원격접속 허용 ◀"  >> $resultfile 2>&1
	echo " 양호 판단 기준 : 원격 접속 시 SSH 프로토콜을 사용하는 경우" >> $resultfile 2>&1
	echo " ### ssh, telnet이 동시에 설치되어 있는 경우 취약한 것으로 평가됨" >> $resultfile 2>&1
	if [ -f /etc/services ]; then
		if [ `cat /etc/services | grep -vE '^#|^\s#' | awk 'tolower($1)=="telnet" {print $2}' | awk -F / 'tolower($2)=="tcp" {print $1}' | wc -l` -gt 0 ]; then
			u60_port=(`cat /etc/services | grep -vE '^#|^\s#' | awk 'tolower($1)=="telnet" {print $2}' | awk -F / 'tolower($2)=="tcp" {print $1}'`)
			for ((x=0; x<${#u60_port[@]}; x++))
			do
				if [ `netstat -nat 2>/dev/null | grep -w 'tcp' | grep ":${u60_port[$x]} " | wc -l` -gt 0 ] || [ `ps -ef | grep -i 'telnet' | grep -v 'grep' | wc -l` -gt 0 ]; then
					echo "※ U-60 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
					echo " Telnet 서비스가 실행 중입니다." >> $resultfile 2>&1
					return 0
				fi
			done
		fi
		if [ `cat /etc/services | grep -vE '^#|^\s#' | awk 'tolower($1)=="ftp" {print $2}' | awk -F / 'tolower($2)=="tcp" {print $1}' | wc -l` -gt 0 ]; then
			u60_port=(`cat /etc/services | grep -vE '^#|^\s#' | awk 'tolower($1)=="ftp" {print $2}' | awk -F / 'tolower($2)=="tcp" {print $1}'`)
			for ((z=0; z<${#u60_port[@]}; z++))
			do
				if [ `netstat -nat 2>/dev/null | grep -w 'tcp' | grep ":${u60_port[$z]} " | wc -l` -gt 0 ] || [ `ps -ef | grep -i 'ftp' | grep -v 'grep' | wc -l` -gt 0 ]; then
					echo "※ U-60 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
					echo " ftp 서비스가 실행 중입니다." >> $resultfile 2>&1
					return 0
				fi
			done
		fi
	fi
	if [ `find / -name 'vsftpd.conf' -type f 2>/dev/null | wc -l` -gt 0 ]; then
		u60_file=(`find / -name 'vsftpd.conf' -type f 2>/dev/null`)
		for ((i=0; i<${#u60_file[@]}; i++))
		do
			if [ -f ${u60_file[$i]} ]; then
				if [ `cat ${u60_file[$i]} | grep -vE '^#|^\s#' | grep 'listen_port' | awk -F = '{gsub(" ", "", $0); print $2}' | wc -l` -gt 0 ]; then
					u60_port=(`cat ${u60_file[$i]} | grep -vE '^#|^\s#' | grep 'listen_port' | awk -F = '{gsub(" ", "", $0); print $2}'`)
					for ((h=0; h<${#u60_port[@]}; h++))
					do
						if [ `netstat -nat 2>/dev/null | grep -w 'tcp' | grep ":${u60_port[$h]} " | wc -l` -gt 0 ] || [ `ps -ef | grep -i 'ftp' | grep -v 'grep' | wc -l` -gt 0 ]; then
							echo "※ U-60 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
							echo " ftp 서비스가 실행 중입니다." >> $resultfile 2>&1
							return 0
						fi
					done
				fi
			fi
		done
	fi
	if [ `find / -name 'proftpd.conf' -type f 2>/dev/null | wc -l` -gt 0 ]; then
		u60_file=(`find / -name 'proftpd.conf' -type f 2>/dev/null`)
		for ((j=0; j<${#u60_file[@]}; j++))
		do
			if [ -f ${u60_file[$j]} ]; then
				if [ `cat ${u60_file[$j]} | grep -vE '^#|^\s#' | grep 'Port' | awk '{print $2}' | wc -l` -gt 0 ]; then
					u60_port=(`cat ${u60_file[$j]} | grep -vE '^#|^\s#' | grep 'Port' | awk '{print $2}'`)
					for ((h=0; h<${#u60_port[@]}; h++))
					do
						if [ `netstat -nat 2>/dev/null | grep -w 'tcp' | grep ":${u60_port[$h]} " | wc -l` -gt 0 ] || [ `ps -ef | grep -i 'ftp' | grep -v 'grep' | wc -l` -gt 0 ]; then
							echo "※ U-60 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
							echo " ftp 서비스가 실행 중입니다." >> $resultfile 2>&1
							return 0
						fi
					done
				fi
			fi
		done
	fi
	if [ `netstat -nat 2>/dev/null | grep -w 'tcp' | grep ':23 ' | wc -l` -gt 0 ] || [ `ps -ef | grep -i 'telnet' | grep -v 'grep' | wc -l` -gt 0 ]; then
		echo "※ U-60 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
		echo " Telnet 서비스가 실행 중입니다." >> $resultfile 2>&1
		return 0
	fi
	if [ `netstat -nat 2>/dev/null | grep -w 'tcp' | grep -E ':21 |:20 ' | wc -l` -gt 0 ] || [ `ps -ef | grep -i 'ftp' | grep -v 'grep' | wc -l` -gt 0 ]; then
		echo "※ U-60 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
		echo " ftp 서비스가 실행 중입니다." >> $resultfile 2>&1
		return 0
	fi
	if [ `find / -name 'sshd_config' -type f 2>/dev/null | wc -l` -gt 0 ]; then
		u60_file=(`find / -name 'sshd_config' -type f 2>/dev/null`)
		for ((j=0; j<${#u60_file[@]}; j++))
		do
			if [ -f ${u60_file[$j]} ]; then
				if [ `cat ${u60_file[$j]} | grep -vE '^#|^\s#' | grep -i 'Port' | awk '{print $2}' | wc -l` -gt 0 ]; then
					u60_port=(`cat ${u60_file[$j]} | grep -vE '^#|^\s#' | grep -i 'Port' | awk '{print $2}'`)
					for ((h=0; h<${#u60_port[@]}; h++))
					do
						if [ `netstat -nat 2>/dev/null | grep -w 'tcp' | grep ":${u60_port[$h]} " | wc -l` -eq 0 ] && [ `ps -ef | grep -i 'sshd' | grep -v 'grep' | wc -l` -eq 0 ]; then
							echo "※ U-60 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
							echo " SSH 서비스가 비활성화 상태입니다." >> $resultfile 2>&1
							return 0
						fi
					done
				fi
			fi
		done
	fi
	if [ `netstat -nat 2>/dev/null | grep -w 'tcp' | grep -E ':22 ' | wc -l` -eq 0 ] && [ `ps -ef | grep -i 'sshd' | grep -v 'grep' | wc -l` -eq 0 ]; then
		echo "※ U-60 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
		echo " SSH 서비스가 비활성화 상태입니다." >> $resultfile 2>&1
		return 0
	fi
	if [ `dpkg -l 2>/dev/null | grep libpam | wc -l` -gt 0 ]; then
		echo "※ U-60 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
		echo " SSH 서비스와 Telnet 서비스가 동시에 설치되어 있습니다." >> $resultfile 2>&1
		return 0
	else
		echo "※ U-60 결과 : 양호(Good)" >> $resultfile 2>&1
		return 0
	fi
}

U_61() {
	echo ""  >> $resultfile 2>&1
	echo "▶ U-61(하) | 3. 서비스 관리 > 3.25 ftp 서비스 확인 ◀"  >> $resultfile 2>&1
	echo " 양호 판단 기준 : FTP 서비스가 비활성화 되어 있는 경우" >> $resultfile 2>&1
	if [ -f /etc/services ]; then
		if [ `cat /etc/services | grep -vE '^#|^\s#' | awk 'tolower($1)=="ftp" {print $2}' | awk -F / 'tolower($2)=="tcp" {print $1}' | wc -l` -gt 0 ]; then
			u61_port=(`cat /etc/services | grep -vE '^#|^\s#' | awk 'tolower($1)=="ftp" {print $2}' | awk -F / 'tolower($2)=="tcp" {print $1}'`)
			for ((h=0; h<${#u61_port[@]}; h++))
			do
				if [ `netstat -nat 2>/dev/null | grep -w 'tcp' | grep ":${u61_port[$h]} " | wc -l` -gt 0 ] || [ `ps -ef | grep -i 'ftp' | grep -v 'grep' | wc -l` -gt 0 ]; then
					echo "※ U-61 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
					echo " ftp 서비스가 실행 중입니다." >> $resultfile 2>&1
					return 0
				fi
			done
		fi
	fi
	if [ `find / -name 'vsftpd.conf' -type f 2>/dev/null | wc -l` -gt 0 ]; then
		u61_file=(`find / -name 'vsftpd.conf' -type f 2>/dev/null`)
		for ((i=0; i<${#u61_file[@]}; i++))
		do
			if [ -f ${u61_file[$i]} ]; then
				if [ `cat ${u61_file[$i]} | grep -vE '^#|^\s#' | grep 'listen_port' | awk -F = '{gsub(" ", "", $0); print $2}' | wc -l` -gt 0 ]; then
					u61_port=(`cat ${u61_file[$i]} | grep -vE '^#|^\s#' | grep 'listen_port' | awk -F = '{gsub(" ", "", $0); print $2}'`)
					for ((l=0; l<${#u61_port[@]}; l++))
					do
						if [ `netstat -nat 2>/dev/null | grep -w 'tcp' | grep ":${u61_port[$l]} " | wc -l` -gt 0 ] || [ `ps -ef | grep -i 'ftp' | grep -v 'grep' | wc -l` -gt 0 ]; then
							echo "※ U-61 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
							echo " ftp 서비스가 실행 중입니다." >> $resultfile 2>&1
							return 0
						fi
					done
				fi
			fi
		done
	fi
	if [ `find / -name 'vsftpd.conf' -type f 2>/dev/null | wc -l` -gt 0 ]; then
		u61_file=(`find / -name 'proftpd.conf' -type f 2>/dev/null`)
		for ((j=0; j<${#u61_file[@]}; j++))
		do
			if [ -f ${u61_file[$j]} ]; then
				if [ `cat ${u61_file[$j]} | grep -vE '^#|^\s#' | grep 'Port' | awk '{print $2}' | wc -l` -gt 0 ]; then
					u61_port=(`cat ${u61_file[$j]} | grep -vE '^#|^\s#' | grep 'Port' | awk '{print $2}'`)
					for ((k=0; k<${#u61_port[@]}; k++))
					do
						if [ `netstat -nat 2>/dev/null | grep -w 'tcp' | grep ":${u61_port[$k]} " | wc -l` -gt 0 ] || [ `ps -ef | grep -i 'ftp' | grep -v 'grep' | wc -l` -gt 0 ]; then
							echo "※ U-61 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
							echo " ftp 서비스가 실행 중입니다." >> $resultfile 2>&1
							return 0
						fi
					done
				fi
			fi
		done
	fi
	if [ `netstat -nat 2>/dev/null | grep -w 'tcp' | grep -E ':21 |:20 ' | wc -l` -gt 0 ] || [ `ps -ef | grep -iE 'ftp|vsftpd|proftp' | grep -v 'grep' | wc -l` -gt 0 ]; then
		echo "※ U-61 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
		echo " ftp 서비스가 실행 중입니다." >> $resultfile 2>&1
		return 0
	else
		echo "※ U-61 결과 : 양호(Good)" >> $resultfile 2>&1
		return 0
	fi
}

U_62() {
	echo ""  >> $resultfile 2>&1
	echo "▶ U-62(중) | 3. 서비스 관리 > 3.26 ftp 계정 shell 제한 ◀"  >> $resultfile 2>&1
	echo " 양호 판단 기준 : ftp 계정에 /bin/false 쉘이 부여되어 있는 경우" >> $resultfile 2>&1
	if [ `cat /etc/passwd | awk -F : '$1=="ftp" && $7=="/bin/false"' | wc -l` -gt 0 ]; then
		echo "※ U-62 결과 : 양호(Good)" >> $resultfile 2>&1
		return 0
	else
		echo "※ U-62 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
		echo " ftp 계정에 /bin/false 쉘이 부여되어 있지 않습니다." >> $resultfile 2>&1
		return 0
	fi
}

U_63() {
	echo ""  >> $resultfile 2>&1
	echo "▶ U-63(하) | 3. 서비스 관리 > 3.27 ftpusers 파일 소유자 및 권한 설정 ◀"  >> $resultfile 2>&1
	echo " 양호 판단 기준 : ftpusers 파일의 소유자가 root이고, 권한이 640 이하인 경우" >> $resultfile 2>&1
	u63_count=0
	u63_file=("/etc/ftpusers" "/etc/pure-ftpd/ftpusers" "/etc/wu-ftpd/ftpusers" "/etc/vsftpd/ftpusers" "/etc/proftpd/ftpusers" "/etc/ftpd/ftpusers" "/etc/vsftpd.ftpusers" "/etc/vsftpd.user_list" "/etc/vsftpd/user_list")
	for ((i=0; i<${#u63_file[@]}; i++))
	do
		if [ -f ${u63_file[$i]} ]; then
			((u63_count++))
			if [ `ls -l ${u63_file[$i]} | awk '{print $3}'` == root ]; then
				if [ `stat ${u63_file[$i]} | grep -i 'Uid' | awk '{print $2}' | awk -F / '{print substr($1,3,3)}'` -le 640 ]; then
					u63_owner=`stat ${u63_file[$i]} | grep -i 'Uid' | awk '{print $2}' | awk -F / '{print substr($1,3,1)}'`
					if [ $u63_owner -eq 6 ] || [ $u63_owner -eq 4 ] || [ $u63_owner -eq 2 ] || [ $u63_owner -eq 0 ]; then
						u63_group=`stat ${u63_file[$i]} | grep -i 'Uid' | awk '{print $2}' | awk -F / '{print substr($1,4,1)}'`
						if [ $u63_group -eq 4 ] || [ $u63_group -eq 0 ]; then
							u63_other=`stat ${u63_file[$i]} | grep -i 'Uid' | awk '{print $2}' | awk -F / '{print substr($1,5,1)}'`
							if [ $u63_other -ne 0 ]; then
								echo "※ U-63 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
								echo " ${u63_file[$i]} 파일의 다른 사용자(other)에 대한 권한이 취약합니다." >> $resultfile 2>&1
								return 0
							fi
						else
							echo "※ U-63 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
							echo " ${u63_file[$i]} 파일의 그룹 사용자(group)에 대한 권한이 취약합니다." >> $resultfile 2>&1
							return 0
						fi
					else
						echo "※ U-63 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
						echo " ${u63_file[$i]} 파일의 사용자(owner)에 대한 권한이 취약합니다." >> $resultfile 2>&1
						return 0
					fi
				else
					echo "※ U-63 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
					echo " ${u63_file[$i]} 파일의 권한이 640보다 큽니다." >> $resultfile 2>&1
					return 0
				fi
			else
				echo "※ U-63 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
				echo " ${u63_file[$i]} 파일의 소유자(owner)가 root가 아닙니다." >> $resultfile 2>&1
				return 0
			fi
		fi
	done
	if [ $u63_count -eq 0 ]; then
		echo "※ U-63 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
		echo " ftp 접근제어 파일이 없습니다." >> $resultfile 2>&1
		return 0
	else
		echo "※ U-63 결과 : 양호(Good)" >> $resultfile 2>&1
		return 0
	fi
}

U_64() {
	echo ""  >> $resultfile 2>&1
	echo "▶ U-64(중) | 3. 서비스 관리 > 3.28 ftpusers 파일 설정(FTP 서비스 root 계정 접근제한) ◀"  >> $resultfile 2>&1
	echo " 양호 판단 기준 : FTP 서비스가 비활성화 되어 있거나, 활성화 시 root 계정 접속을 차단한 경우" >> $resultfile 2>&1
	u64_file=("/etc/ftpusers" "/etc/ftpd/ftpusers" "/etc/proftpd.conf" "/etc/vsftp/ftpusers" "/etc/vsftp/user_list" "/etc/vsftpd.ftpusers" "/etc/vsftpd.user_list")
	u64_count=0
	u64_file_count=0
	if [ -f /etc/services ]; then
		if [ `cat /etc/services | grep -vE '^#|^\s#' | awk -F " " 'tolower($1)=="ftp" {print $2}' | awk -F / 'tolower($2)=="tcp" {print $1}' | wc -l` -gt 0 ]; then
			u64_port=(`cat /etc/services | grep -vE '^#|^\s#' | awk -F " " 'tolower($1)=="ftp" {print $2}' | awk -F / 'tolower($2)=="tcp" {print $1}'`)
			for ((i=0; i<${#u64_port[@]}; i++))
			do
				if [ `netstat -nat 2>/dev/null | grep -w 'tcp' | grep ":${u64_port[$i]} " | wc -l` -gt 0 ] || [ `ps -ef | grep -i 'ftp' | grep -v 'grep' | wc -l` -gt 0 ]; then
					((u64_count++))
					for ((j=0; j<${#u64_file[@]}; j++))
					do
						if [ -f ${u64_file[$j]} ]; then
							((u64_file_count++))
							if [ ${u64_file[$j]} == /etc/proftpd.conf ]; then
								if [ `cat ${u64_file[$j]} | grep -vE '^#|^\s#' | grep -i 'RootLogin' | grep -i 'on' | wc -l` -gt 0 ]; then
									echo "※ U-64 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
									echo " ${u64_file[$j]} 파일에 'RootLogin on' 설정이 있습니다." >> $resultfile 2>&1
									return 0
								fi
							else
								if [ `cat ${u64_file[$j]} | grep -vE '^#|^\s#' | grep -w 'root' | wc -l` -eq 0 ]; then
									echo "※ U-64 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
									echo " ${u64_file[$j]} 파일에 'root' 계정이 없습니다." >> $resultfile 2>&1
									return 0
								fi
							fi
						fi
					done
				fi
			done
		fi
	fi
	if [ $u64_count -gt 0 ] && [ $u64_file_count -eq 0 ]; then
		echo "※ U-64 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
		echo " ftp 서비스를 사용하고, 'root' 계정의 접근을 제한할 파일이 없습니다." >> $resultfile 2>&1
		return 0
	fi
	u64_count2=0
	u64_file_count2=0
	if [ `netstat -nat 2>/dev/null | grep -w 'tcp' | grep -E ':21 |:20 ' | wc -l` -gt 0 ] || [ `ps -ef | grep -iE 'ftp|vsftpd|proftp' | grep -v 'grep' | wc -l` -gt 0 ]; then
		((u64_count2++))
		for ((j=0; j<${#u64_file[@]}; j++))
		do
			if [ -f ${u64_file[$j]} ]; then
				((u64_file_count2++))
				if [ ${u64_file[$j]} == /etc/proftpd.conf ]; then
					if [ `cat ${u64_file[$j]} | grep -vE '^#|^\s#' | grep -i 'RootLogin' | grep -i 'on' | wc -l` -gt 0 ]; then
						echo "※ U-64 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
						echo " ${u64_file[$j]} 파일에 'RootLogin on' 설정이 있습니다." >> $resultfile 2>&1
						return 0
					fi
				else
					if [ `cat ${u64_file[$j]} | grep -vE '^#|^\s#' | grep -w 'root' | wc -l` -eq 0 ]; then
						echo "※ U-64 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
						echo " ${u64_file[$j]} 파일에 'root' 계정이 없습니다." >> $resultfile 2>&1
						return 0
					fi
				fi
			fi
		done
	fi
	if [ $u64_count2 -gt 0 ] && [ $u64_file_count2 -eq 0 ]; then
		echo "※ U-64 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
		echo " ftp 서비스를 사용하고, 'root' 계정의 접근을 제한할 파일이 없습니다." >> $resultfile 2>&1
		return 0
	fi
	echo "※ U-64 결과 : 양호(Good)" >> $resultfile 2>&1
	return 0
}

U_65() {
	echo ""  >> $resultfile 2>&1
	echo "▶ U-65(중) | 3. 서비스 관리 > 3.29 at 서비스 권한 설정 ◀"  >> $resultfile 2>&1
	echo " 양호 판단 기준 : at 명령어 일반사용자 금지 및 at 관련 파일 640 이하인 경우" >> $resultfile 2>&1
	u65_home=(`cat /etc/passwd | awk -F : '$7!="/bin/false" && $7!="/sbin/nologin" && $6!=null {print $6}' | uniq`)
	u65_home2=(/home/*)
	for ((k=0; k<${#u65_home2[@]}; k++))
	do
		u65_home[${#u65_home[@]}]=${u65_home2[$k]}
	done
	u65_file=("/etc/profile" "/etc/.login")
	u65_hiddenfile=(".profile" ".cshrc" ".login" ".kshrc" ".bash_profile" ".bashrc" ".bash_login")
	u65_path=(`echo $PATH | awk -F : '{for (i=1; i<=NF; i++) {print $i}}'`)
	for ((i=0; i<${#u65_home[@]}; i++))
	do
		for ((j=0; j<${#u65_hiddenfile[@]}; j++))
		do
			if [ -f ${u65_home[$i]}/${u65_hiddenfile[$j]} ]; then
				if [ `cat ${u65_home[$i]}/${u65_hiddenfile[$j]} | grep -i 'path' | wc -l` -gt 0 ]; then
					u65_hiddenfile_path=(`cat ${u65_home[$i]}/${u65_hiddenfile[$j]} | grep -i 'PATH' | awk -F \" '{print $2}' | awk -F : '{for (i=1;i<=NF;i++) {print $i}}'`)
					for ((k=0; k<${#u65_file[@]}; k++))
					do
						for ((l=0; l<${#u65_hiddenfile_path[@]}; l++))
						do
							if [ ${u65_file[$k]} != ${u65_hiddenfile_path[$l]} ] && [ ${u65_hiddenfile_path[$l]} != \$PATH ]; then
								if [[ ${u65_hiddenfile_path[$l]} == \$HOME* ]]; then
									u65_hiddenfile_path[$l]=$(echo ${u65_hiddenfile_path[l]} | awk -v u65_awk=${u65_home[i]} '{gsub("\\$HOME",u65_awk,$0)} 1')
								fi
								u65_path[${#u65_path[@]}]=${u65_hiddenfile_path[$l]}
							fi
						done
					done
				fi
			fi
		done
	done
	for ((i=0; i<${#u65_path[@]}; i++))
	do
		if [ -f ${u65_path[$i]}/at ]; then
			u65_group=`stat ${u65_path[$i]}/at | grep -i 'Uid' | awk '{print $2}' | awk -F / '{print substr($1,4,1)}'`
			if [ $u65_group -eq 5 ] || [ $u65_group -eq 4 ] || [ $u65_group -eq 1 ] || [ $u65_group -eq 0 ]; then
				if [ `stat ${u65_path[$i]}/at | grep -i 'Uid' | awk '{print $2}' | awk -F / '{print substr($1,5,1)}'` -ne 0 ]; then
					echo "※ U-65 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
					echo " ${u65_path[$i]}/at 실행 파일이 다른 사용자(other)에 의해 실행이 가능합니다." >> $resultfile 2>&1
					return 0
				fi
			else
				echo "※ U-65 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
				echo " ${u65_path[$i]}/at 실행 파일의 그룹 사용자(group)에 대한 권한이 취약합니다." >> $resultfile 2>&1
				return 0
			fi
		fi
	done
	u65_atfile=("/etc/at.allow" "/etc/at.deny")
	for ((i=0; i<${#u65_atfile[@]}; i++))
	do
		if [ -f ${u65_atfile[$i]} ]; then
			if [ `ls -l ${u65_atfile[$i]} | awk '{print $3}'` == root ]; then
				if [ `stat ${u65_atfile[$i]} | grep -i 'Uid' | awk '{print $2}' | awk -F / '{print substr($1,3,3)}'` -le 640 ]; then
					u65_owner=`stat ${u65_atfile[$i]} | grep -i 'Uid' | awk '{print $2}' | awk -F / '{print substr($1,3,1)}'`
					if [ $u65_owner -eq 6 ] || [ $u65_owner -eq 4 ] || [ $u65_owner -eq 2 ] || [ $u65_owner -eq 0 ]; then
						u65_group=`stat ${u65_atfile[$i]} | grep -i 'Uid' | awk '{print $2}' | awk -F / '{print substr($1,4,1)}'`
						if [ $u65_group -eq 4 ] || $u65_owner -eq 0 ]; then
							if [ `stat ${u65_atfile[$i]} | grep -i 'Uid' | awk '{print $2}' | awk -F / '{print substr($1,5,1)}'` -ne 0 ]; then
								echo "※ U-65 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
								echo " ${u65_atfile[$i]} 파일의 다른 사용자(other)에 대한 권한이 취약합니다." >> $resultfile 2>&1
								return 0
							fi
						else
							echo "※ U-65 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
							echo " ${u65_atfile[$i]} 파일의 그룹 사용자(group)에 대한 권한이 취약합니다." >> $resultfile 2>&1
							return 0
						fi
					else
						echo "※ U-65 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
						echo " ${u65_atfile[$i]} 파일의 사용자(owner)에 대한 권한이 취약합니다." >> $resultfile 2>&1
						return 0
					fi
				else
					echo "※ U-65 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
					echo " ${u65_atfile[$i]} 파일의 권한이 640보다 큽니다." >> $resultfile 2>&1
					return 0
				fi
			else
				echo "※ U-65 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
				echo " ${u65_atfile[$i]} 파일의 소유자(owner)가 root가 아닙니다." >> $resultfile 2>&1
				return 0
			fi
		fi
	done
	echo "※ U-65 결과 : 양호(Good)" >> $resultfile 2>&1
	return 0
}

U_66() {
	echo ""  >> $resultfile 2>&1
	echo "▶ U-66(중) | 3. 서비스 관리 > 3.30 SNMP 서비스 구동 점검 ◀"  >> $resultfile 2>&1
	echo " 양호 판단 기준 : SNMP 서비스를 사용하지 않는 경우" >> $resultfile 2>&1
	if [ `ps -ef | grep -i 'snmp' | grep -v 'grep' | wc -l` -gt 0 ]; then
		echo "※ U-66 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
		echo " SNMP 서비스를 사용하고 있습니다." >> $resultfile 2>&1
		return 0
	else
		echo "※ U-66 결과 : 양호(Good)" >> $resultfile 2>&1
		return 0
	fi
}

U_67() {
	echo ""  >> $resultfile 2>&1
	echo "▶ U-67(중) | 3. 서비스 관리 > 3.31 SNMP 서비스 Community String의 복잡성 설정 ◀"  >> $resultfile 2>&1
	echo " 양호 판단 기준 : SNMP Community 이름이 public, private 이 아닌 경우" >> $resultfile 2>&1
	if [ `ps -ef | grep -i 'snmp' | grep -v 'grep' | wc -l` -gt 0 ]; then
		if [ `find / -name 'snmpd.conf' -type f 2>/dev/null | wc -l` -gt 0 ]; then
			u67_file=(`find / -name 'snmpd.conf' -type f 2>/dev/null`)
			for ((i=0; i<${#u67_file[@]}; i++))
			do
				if [ `cat ${u67_file[$i]} | grep -vE '^#|^\s#' | grep -iE 'public|private' | wc -l` -gt 0 ]; then
					echo "※ U-67 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
					echo " SNMP Community String이 public 또는 private으로 설정되어 있습니다." >> $resultfile 2>&1
					return 0
				fi
			done
		else
			echo "※ U-67 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
			echo " SNMP 서비스를 사용하고, Community String을 설정하는 파일이 없습니다." >> $resultfile 2>&1
			return 0
		fi
	fi
	echo "※ U-67 결과 : 양호(Good)" >> $resultfile 2>&1
	return 0
}

U_68() {
	echo ""  >> $resultfile 2>&1
	echo "▶ U-68(하) | 3. 서비스 관리 > 3.32 로그온 시 경고 메시지 제공 ◀"  >> $resultfile 2>&1
	echo " 양호 판단 기준 : 서버 및 Telnet, FTP, SMTP, DNS 서비스에 로그온 메시지가 설정되어 있는 경우" >> $resultfile 2>&1
	echo " ### DNS 배너의 경우 '/etc/named.conf' 또는 '/var/named' 파일을 수동으로 점검하세요." >> $resultfile 2>&1
	if [ -f /etc/motd ]; then
		if [ `cat /etc/motd | grep -vE '^ *#|^$' | wc -l` -eq 0 ]; then
			echo "※ U-68 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
			echo " /etc/motd 파일에 로그온 메시지를 설정하지 않았습니다." >> $resultfile 2>&1
			return 0
		fi
	else
		echo "※ U-68 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
		echo " /etc/motd 파일이 없습니다." >> $resultfile 2>&1
		return 0
	fi
	if [ -f /etc/services ]; then
		if [ `cat /etc/services | grep -vE '^#|^\s#' | awk 'tolower($1)=="telnet" {print $2}' | awk -F / 'tolower($2)=="tcp" {print $1}' | wc -l` -gt 0 ]; then
			u68_port=(`cat /etc/services | grep -vE '^#|^\s#' | awk 'tolower($1)=="telnet" {print $2}' | awk -F / 'tolower($2)=="tcp" {print $1}'`)
			for ((x=0; x<${#u68_port[@]}; x++))
			do
				if [ `netstat -nat 2>/dev/null | grep -w 'tcp' | grep ":${u68_port[$x]} " | wc -l` -gt 0 ] || [ `ps -ef | grep -i 'telnet' | grep -v 'grep' | wc -l` -gt 0 ]; then
					if [ -f /etc/issue.net ]; then
						if [ `cat /etc/issue.net | grep -vE '^ *#|^$' | wc -l` -eq 0 ]; then
							echo "※ U-68 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
							echo " telnet 서비스를 사용하고, /etc/issue.net 파일에 로그온 메시지를 설정하지 않았습니다." >> $resultfile 2>&1
							return 0
						fi
					else
						echo "※ U-68 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
						echo " telnet 서비스를 사용하고, /etc/issue.net 파일이 없습니다." >> $resultfile 2>&1
						return 0
					fi
				fi
			done
		fi
	fi
	if [ `netstat -nat 2>/dev/null | grep -w 'tcp' | grep ':23 ' | wc -l` -gt 0 ] || [ `ps -ef | grep -i 'telnet' | grep -v 'grep' | wc -l` -gt 0 ]; then
		if [ -f /etc/issue.net ]; then
			if [ `cat /etc/issue.net | grep -vE '^ *#|^$' | wc -l` -eq 0 ]; then
				echo "※ U-68 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
				echo " telnet 서비스를 사용하고, /etc/issue.net 파일에 로그온 메시지를 설정하지 않았습니다." >> $resultfile 2>&1
				return 0
			fi
		else
			echo "※ U-68 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
			echo " telnet 서비스를 사용하고, /etc/issue.net 파일이 없습니다." >> $resultfile 2>&1
			return 0
		fi
	fi
	if [ -f /etc/services ]; then
		if [ `cat /etc/services | grep -vE '^#|^\s#' | awk 'tolower($1)=="ftp" {print $2}' | awk -F / 'tolower($2)=="tcp" {print $1}' | wc -l` -gt 0 ]; then
			u68_port=(`cat /etc/services | grep -vE '^#|^\s#' | awk 'tolower($1)=="ftp" {print $2}' | awk -F / 'tolower($2)=="tcp" {print $1}'`)
			for ((x=0; x<${#u68_port[@]}; x++))
			do
				if [ `netstat -nat 2>/dev/null | grep -w 'tcp' | grep ":${u68_port[$x]} " | wc -l` -gt 0 ] || [ `ps -ef | grep -i 'ftp' | grep -vE 'grep|tftp|sftp' | wc -l` -gt 0 ]; then
					u68_ftp_count=0
					if [ -f /etc/vsftpd.conf ]; then
						((u68_ftp_count++))
						if [ `cat /etc/vsftpd.conf | grep -vE '^#|^\s#' | grep 'ftpd_banner' | awk -F = '$2!=" " {print $2}' | wc -l` -eq 0 ]; then
							echo "※ U-68 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
							echo " ftp 서비스를 사용하고, /etc/vsftpd.conf 파일에 로그온 메시지를 설정하지 않았습니다." >> $resultfile 2>&1
							return 0
						fi
					fi
					if [ -f /etc/proftpd/proftpd.conf ]; then
						((u68_ftp_count++))
						if [ `cat /etc/proftpd/proftpd.conf | grep -vE '^#|^\s#' | grep 'ServerIdent' | wc -l` -eq 0 ]; then
							echo "※ U-68 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
							echo " ftp 서비스를 사용하고, /etc/proftpd/proftpd.conf 파일에 로그온 메시지를 설정하지 않았습니다." >> $resultfile 2>&1
							return 0
						fi
					fi
					if [ -f /etc/pure-ftpd/conf/WelcomeMsg ]; then
						((u68_ftp_count++))
						if [ `cat /etc/pure-ftpd/conf/WelcomeMsg | grep -vE '^ *#|^$' | wc -l` -eq 0 ]; then
							echo "※ U-68 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
							echo " ftp 서비스를 사용하고, /etc/pure-ftpd/conf/WelcomeMsg 파일에 로그온 메시지를 설정하지 않았습니다." >> $resultfile 2>&1
							return 0
						fi
					fi
					if [ $u68_ftp_count -eq 0 ]; then
						echo "※ U-68 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
						echo " ftp 서비스를 사용하고, 로그온 메시지를 설정하는 파일이 없습니다." >> $resultfile 2>&1
						return 0
					fi
					
				fi
			done
		fi
	fi
	if [ `netstat -nat 2>/dev/null | grep -w 'tcp' | grep -E ':20 |:21 ' | wc -l` -gt 0 ] || [ `ps -ef | grep -i 'ftp' | grep -vE 'grep|tftp|sftp' | wc -l` -gt 0 ]; then
		u68_ftp_count=0
		if [ -f /etc/vsftpd.conf ]; then
			((u68_ftp_count++))
			if [ `cat /etc/vsftpd.conf | grep -vE '^#|^\s#' | grep 'ftpd_banner' | awk -F = '$2!=" " {print $2}' | wc -l` -eq 0 ]; then
				echo "※ U-68 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
				echo " ftp 서비스를 사용하고, /etc/vsftpd.conf 파일에 로그온 메시지를 설정하지 않았습니다." >> $resultfile 2>&1
				return 0
			fi
		fi
		if [ -f /etc/proftpd/proftpd.conf ]; then
			((u68_ftp_count++))
			if [ `cat /etc/proftpd/proftpd.conf | grep -vE '^#|^\s#' | grep 'ServerIdent' | wc -l` -eq 0 ]; then
				echo "※ U-68 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
				echo " ftp 서비스를 사용하고, /etc/proftpd/proftpd.conf 파일에 로그온 메시지를 설정하지 않았습니다." >> $resultfile 2>&1
				return 0
			fi
		fi
		if [ -f /etc/pure-ftpd/conf/WelcomeMsg ]; then
			((u68_ftp_count++))
			if [ `cat /etc/pure-ftpd/conf/WelcomeMsg | grep -vE '^ *#|^$' | wc -l` -eq 0 ]; then
				echo "※ U-68 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
				echo " ftp 서비스를 사용하고, /etc/pure-ftpd/conf/WelcomeMsg 파일에 로그온 메시지를 설정하지 않았습니다." >> $resultfile 2>&1
				return 0
			fi
		fi
		if [ $u68_ftp_count -eq 0 ]; then
			echo "※ U-68 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
			echo " ftp 서비스를 사용하고, 로그온 메시지를 설정하는 파일이 없습니다." >> $resultfile 2>&1
			return 0
		fi
	fi
	if [ -f /etc/services ]; then
		if [ `cat /etc/services | grep -vE '^#|^\s#' | awk 'tolower($1)=="smtp" {print $2}' | awk -F / 'tolower($2)=="tcp" {print $1}' | wc -l` -gt 0 ]; then
			u68_port=(`cat /etc/services | grep -vE '^#|^\s#' | awk 'tolower($1)=="smtp" {print $2}' | awk -F / 'tolower($2)=="tcp" {print $1}'`)
			for ((x=0; x<${#u68_port[@]}; x++))
			do
				if [ `netstat -nat 2>/dev/null | grep -w 'tcp' | grep ":${u68_port[$x]} " | wc -l` -gt 0 ] || [ `ps -ef | grep -iE 'smtp|sendmail' | grep -v 'grep' | wc -l` -gt 0 ]; then
					if [ `find / -name 'sendmail.cf' -type f 2>/dev/null | wc -l` -gt 0 ]; then
						u65_file=(`find / -name 'sendmail.cf' -type f 2>/dev/null`)
						for ((i=0; i<${#u65_file[@]}; i++))
						do
							if [ `cat ${u65_file[$i]} | grep -vE '^#|^\s#' | grep 'Snmp' | grep 'GreetingMessage' | awk -F = '{gsub(" ", "", $0); print $2}' | wc -l` -eq 0 ]; then
								echo "※ U-68 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
								echo " smtp 서비스를 사용하고, ${u65_file[$i]} 파일에 로그온 메시지를 설정하지 않았습니다." >> $resultfile 2>&1
								return 0
							fi
						done
					else
						echo "※ U-68 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
						echo " smtp 서비스를 사용하고, 로그온 메시지를 설정하는 파일이 없습니다." >> $resultfile 2>&1
						return 0
					fi
				fi
			done
		fi
	fi
	if [ `netstat -nat 2>/dev/null | grep -w 'tcp' | grep ':25 ' | wc -l` -gt 0 ] || [ `ps -ef | grep -iE 'smtp|sendmail' | grep -v 'grep' | wc -l` -gt 0 ]; then
		if [ `find / -name 'sendmail.cf' -type f 2>/dev/null | wc -l` -gt 0 ]; then
			u65_file=(`find / -name 'sendmail.cf' -type f 2>/dev/null`)
			for ((i=0; i<${#u65_file[@]}; i++))
			do
				if [ `cat ${u65_file[$i]} | grep -vE '^#|^\s#' | grep 'Snmp' | grep 'GreetingMessage' | awk -F = '{gsub(" ", "", $0); print $2}' | wc -l` -eq 0 ]; then
					echo "※ U-68 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
					echo " smtp 서비스를 사용하고, ${u65_file[$i]} 파일에 로그온 메시지를 설정하지 않았습니다." >> $resultfile 2>&1
					return 0
				fi
			done
		else
			echo "※ U-68 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
			echo " smtp 서비스를 사용하고, 로그온 메시지를 설정하는 파일이 없습니다." >> $resultfile 2>&1
			return 0
		fi
	fi
	echo "※ U-68 결과 : 양호(Good)" >> $resultfile 2>&1
	return 0
}

U_69() {
	echo ""  >> $resultfile 2>&1
	echo "▶ U-69(중) | 3. 서비스 관리 > 3.33 NFS 설정파일 접근권한 ◀"  >> $resultfile 2>&1
	echo " 양호 판단 기준 : NFS 접근제어 설정파일의 소유자가 root 이고, 권한이 644 이하인 경우" >> $resultfile 2>&1
	if [ -f /etc/exports ]; then
		if [ `ls -l /etc/exports | awk '{print $3}'` == root ]; then
			if [ `stat /etc/exports | grep -i 'Uid' | awk '{print $2}' | awk -F / '{print substr($1,3,3)}'` -le 644 ]; then
				u69_owner=`stat /etc/exports | grep -i 'Uid' | awk '{print $2}' | awk -F / '{print substr($1,3,1)}'`
				if [ $u69_owner -eq 6 ] || [ $u69_owner -eq 4 ] || [ $u69_owner -eq 2 ] || [ $u69_owner -eq 0 ]; then
					u69_group=`stat /etc/exports | grep -i 'Uid' | awk '{print $2}' | awk -F / '{print substr($1,4,1)}'`
					if [ $u69_group -eq 4 ] || [ $u69_group -eq 0 ]; then
						u69_other=`stat /etc/exports | grep -i 'Uid' | awk '{print $2}' | awk -F / '{print substr($1,5,1)}'`
						if [ $u69_other -eq 4 ] || [ $u69_other -eq 0 ]; then
							echo "※ U-69 결과 : 양호(Good)" >> $resultfile 2>&1
							return 0
						else
							echo "※ U-69 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
							echo " /etc/exports 파일의 다른 사용자(other)에 대한 권한이 취약합니다." >> $resultfile 2>&1
							return 0
						fi
					else
						echo "※ U-69 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
						echo " /etc/exports 파일의 그룹 사용자(group)에 대한 권한이 취약합니다." >> $resultfile 2>&1
						return 0
					fi
				else
					echo "※ U-69 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
					echo " /etc/exports 파일의 사용자(owner)에 대한 권한이 취약합니다." >> $resultfile 2>&1
					return 0
				fi
			else
				echo "※ U-69 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
				echo " /etc/exports 파일의 권한이 644보다 큽니다." >> $resultfile 2>&1
				return 0
			fi
		else
			echo "※ U-69 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
			echo " /etc/exports 파일의 소유자(owner)가 root가 아닙니다." >> $resultfile 2>&1
			return 0
		fi
	else
		echo "※ U-69 결과 : N/A" >> $resultfile 2>&1
		echo " /etc/exports 파일이 없습니다." >> $resultfile 2>&1
		return 0
	fi
}

U_70() {
	echo ""  >> $resultfile 2>&1
	echo "▶ U-70(중) | 3. 서비스 관리 > 3.34 expn, vrfy 명령어 제한 ◀"  >> $resultfile 2>&1
	echo " 양호 판단 기준 : SMTP 서비스 미사용 또는, noexpn, novrfy 옵션이 설정되어 있는 경우" >> $resultfile 2>&1
	if [ -f /etc/services ]; then
		if [ `cat /etc/services | grep -vE '^#|^\s#' | awk 'tolower($1)=="smtp" {print $2}' | awk -F / 'tolower($2)=="tcp" {print $1}' | wc -l` -gt 0 ]; then
			u70_port=(`cat /etc/services | grep -vE '^#|^\s#' | awk 'tolower($1)=="smtp" {print $2}' | awk -F / 'tolower($2)=="tcp" {print $1}'`)
			for ((x=0; x<${#u70_port[@]}; x++))
			do
				if [ `netstat -nat 2>/dev/null | grep -w 'tcp' | grep ":${u70_port[$x]} " | wc -l` -gt 0 ] || [ `ps -ef | grep -iE 'smtp|sendmail' | grep -v 'grep' | wc -l` -gt 0 ]; then
					if [ `find / -name 'sendmail.cf' -type f 2>/dev/null | wc -l` -gt 0 ]; then
						u70_file=(`find / -name 'sendmail.cf' -type f 2>/dev/null`)
						for ((i=0; i<${#u70_file[@]}; i++))
						do
							if [ `cat ${u70_file[$i]} | grep -vE '^#|^\s#' | grep -i 'PrivacyOptions' | grep -i 'goaway' | wc -l` -eq 0 ] && [ `cat ${u70_file[$i]} | grep -vE '^#|^\s#' | grep -i 'PrivacyOptions' | grep -i 'noexpn' | grep -i 'novrfy' | wc -l` -eq 0 ]; then
								echo "※ U-70 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
								echo " ${u70_file[$i]} 파일에 noexpn, novrfy 또는 goaway 설정이 없습니다." >> $resultfile 2>&1
								return 0
							fi
						done
					else
						echo "※ U-70 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
						echo " noexpn, novrfy 또는 goaway 옵션을 설정하는 파일이 없습니다." >> $resultfile 2>&1
						return 0
					fi
				fi
			done
		fi
	fi
	if [ `netstat -nat 2>/dev/null | grep -w 'tcp' | grep ':25 ' | wc -l` -gt 0 ] || [ `ps -ef | grep -iE 'smtp|sendmail' | grep -v 'grep' | wc -l` -gt 0 ]; then
		if [ `find / -name 'sendmail.cf' -type f 2>/dev/null | wc -l` -gt 0 ]; then
			u70_file=(`find / -name 'sendmail.cf' -type f 2>/dev/null`)
			for ((i=0; i<${#u70_file[@]}; i++))
			do
				if [ `cat ${u70_file[$i]} | grep -vE '^#|^\s#' | grep -i 'PrivacyOptions' | grep -i 'goaway' | wc -l` -eq 0 ] && [ `cat ${u70_file[$i]} | grep -vE '^#|^\s#' | grep -i 'PrivacyOptions' | grep -i 'noexpn' | grep -i 'novrfy' | wc -l` -eq 0 ]; then
					echo "※ U-70 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
					echo " ${u70_file[$i]} 파일에 noexpn, novrfy 또는 goaway 설정이 없습니다." >> $resultfile 2>&1
					return 0
				fi
			done
		else
			echo "※ U-70 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
			echo " noexpn, novrfy 또는 goaway 옵션을 설정하는 파일이 없습니다." >> $resultfile 2>&1
			return 0
		fi
	fi
	echo "※ U-70 결과 : 양호(Good)" >> $resultfile 2>&1
	return 0
}

U_71() {
	echo ""  >> $resultfile 2>&1
	echo "▶ U-71(중) | 3. 서비스 관리 > 3.35 Apache 웹 서비스 정보 숨김 ◀"  >> $resultfile 2>&1
	echo " 양호 판단 기준 : ServerTokens Prod, ServerSignature Off로 설정되어있는 경우" >> $resultfile 2>&1
	u71_count=0
	u71_find=(".htaccess" "httpd.conf" "apache2.conf")
	for ((i=0; i<${#u71_find[@]}; i++))
	do
		if [ `find / -name ${u71_find[$i]} -type f 2>/dev/null | wc -l` -gt 0 ]; then
			((u71_count++))
			u71_file=(`find / -name ${u71_find[$i]} -type f 2>/dev/null`)
			for ((j=0; j<${#u71_file[@]}; j++))
			do
				if [ `cat ${u71_file[$j]} | grep -vE '^#|^\s#' | grep -i 'ServerTokens' | grep -i 'Prod' | wc -l` -gt 0 ]; then
					if [ `cat ${u71_file[$j]} | grep -vE '^#|^\s#' | grep -i 'ServerSignature' | grep -i 'Off' | wc -l` -eq 0 ]; then
						echo "※ U-71 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
						echo " ${u71_file[$j]} 파일에 ServerSignature off 설정이 없습니다." >> $resultfile 2>&1
						return 0
					fi
				else
					echo "※ U-71 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
					echo " ${u71_file[$j]} 파일에 ServerTokens Prod 설정이 없습니다." >> $resultfile 2>&1
					return 0
				fi
			done
		fi
	done
	if [ `ps -ef | grep -iE 'httpd|apache2' | grep -v 'grep' | wc -l` -gt 0 ] && [ $u71_count -eq 0 ]; then
		echo "※ U-71 결과 : 취약(Vulnerable)" >> $resultfile 2>&1
		echo " Apache 서비스를 사용하고, ServerTokens Prod, ServerSignature Off를 설정하는 파일이 없습니다." >> $resultfile 2>&1
		return 0
	else
		echo "※ U-71 결과 : 양호(Good)" >> $resultfile 2>&1
		return 0
	fi
}

U_72() {
	echo ""  >> $resultfile 2>&1
	echo "▶ U-72(하) | 5. 로그 관리 > 5.2 정책에 따른 시스템 로깅 설정 ◀"  >> $resultfile 2>&1
	echo " 양호 판단 기준 : 로그 기록 정책이 정책에 따라 설정되어 수립되어 있으며 보안정책에 따라 로그를 남기고 있을 경우" >> $resultfile 2>&1
	echo "※ U-72 결과 : N/A" >> $resultfile 2>&1
	echo " 수동으로 점검하세요." >> $resultfile 2>&1
}

echo ""  >> $resultfile 2>&1
echo " 점검일 : `date +'%F %H:%M:%S'`"  >> $resultfile 2>&1
echo "##############################################################################" >> $resultfile 2>&1
echo "#                                                                            #" >> $resultfile 2>&1
echo "#           Ubuntu vulnerability assessment results Version 1.0.0            #" >> $resultfile 2>&1
echo "#     Copyright (c) 2022 Kim Jei, Lee Yeeun, Seo Gyeongmin, Jeong Dayeon     #" >> $resultfile 2>&1
echo "#                                                                            #" >> $resultfile 2>&1
echo "##############################################################################" >> $resultfile 2>&1

U_01
U_02
U_03
U_04
U_05
U_06
U_07
U_08
U_09
U_10
U_11
U_12
U_13
U_14
U_15
U_16
U_17
U_18
U_19
U_20
U_21
U_22
U_23
U_24
U_25
U_26
U_27
U_28
U_29
U_30
U_31
U_32
U_33
U_34
U_35
U_36
U_37
U_38
U_39
U_40
U_41
U_42
U_43
U_44
U_45
U_46
U_47
U_48
U_49
U_50
U_51
U_52
U_53
U_54
U_55
U_56
U_57
U_58
U_59
U_60
U_61
U_62
U_63
U_64
U_65
U_66
U_67
U_68
U_69
U_70
U_71
U_72

echo ""  >> $resultfile 2>&1
echo "================================ 진단 결과 요약 ================================" >> $resultfile 2>&1
echo ""  >> $resultfile 2>&1
echo "                              ★ 항목 개수 = `cat Ubuntu_results.txt | grep '결과 : ' | wc -l`" >> $resultfile 2>&1
echo "                              ☆ 취약 개수 = `cat Ubuntu_results.txt | grep '결과 : 취약' | wc -l`" >> $resultfile 2>&1
echo "                              ★ 양호 개수 = `cat Ubuntu_results.txt | grep '결과 : 양호' | wc -l`" >> $resultfile 2>&1
echo "                              ☆ N/A 개수 = `cat Ubuntu_results.txt | grep '결과 : N/A' | wc -l`" >> $resultfile 2>&1
echo ""  >> $resultfile 2>&1
echo "==============================================================================" >> $resultfile 2>&1
echo ""  >> $resultfile 2>&1